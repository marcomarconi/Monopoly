FDMskew <- 1.18
FDM <- 1.0 # 1.5
starting_year <- 1980
directional_only <- 0 # 0: bidirectional, -1: short only, 1: long only
# Penalize short positions (NULL to disable)
short_penality <- NULL
# Apply relative volatility
relative_vol <- FALSE
# Symbol-wise results
symbol_wise <- TRUE
# Strategies weights
weights <- list("Long"=0, "Trend"=0, "Carry"=0, "Skew"=1, "CSM"=0,"Test"=0)
#weights <- list("Long"=1, "Trend"=0, "Carry"=0, "Skew"=0, "CSM"=0,"Test"=0)
if(sum(unlist(weights)) != 1)
stop("Strategy weights do not sum to zero")
# Asset class indices
if(weights[["CSM"]] > 0) {
NPs <- list()
for(n in names(Assets_all)) {
df <- Assets_all[[n]]
df$Volatility = calculate_volatility(df$Return)
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$dNP = c(0, diff(df$NP))
NPs[[n]] <- select(df, Date, Symbol, Class, NP, dNP)
}
allNPs <- do.call(rbind, NPs)
Asset_class_indices <- group_by(allNPs, Class, Date) %>% summarise(Symbol=Symbol, R=mean(dNP)) %>%
arrange(Class, Date) %>% select(-Symbol)  %>%  unique %>% group_by( Class) %>% mutate(A=cumsum(R)) %>% ungroup()
}
# iterate over symbols
for(symbol in names(Assets)) {
cat(paste(symbol, ""))
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = target_vol / df$Volatility
df$Return[is.na(df$Return)] <- 0
df$ForecastLong <- df$ForecastTrend <- df$ForecastCarry <- df$ForecastCSM <- df$ForecastSkew <- df$ForecastTest <- 0
# Relative volatility (strategy 13, improvement is minimal, and we only apply it to trend)
df$M <- 1
if(relative_vol) {
# Carver version
df$RV <- relative_volatility(df$Volatility)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# My version
# df$RV <- runquantile(df$Volatility, k = 252, probs = c(0.25,0.5,0.75), align="right")
# df <- mutate(df, M=case_when(Volatility < RV[,1] ~ 1.5,
#                                 Volatility < RV[,2] & Volatility > RV[,1] ~ 1.25,
#                                 Volatility < RV[,3] & Volatility > RV[,2] ~ 0.75,
#                                 Volatility > RV[,3] ~ 0.5,  TRUE ~ NA))
}
# Long-only
if(weights[["Long"]]  > 0) {
df$ForecastLong <- runif(n = nrow(df), 5, 15)
}
# Trend-following (strategy 9)
if(weights[["Trend"]]  > 0) {
df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastEMA, df$ForecastDC), na.rm = T) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
}
# Carry (strategy 10)
if(weights[["Carry"]]  > 0) {
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
}
# Cross-sectional momentum (strategy 19)
if(weights[["CSM"]]  > 0) {
df <- merge(df, filter(Asset_class_indices, Class==df$Class[1]) %>%  select(Date, A), by="Date") # Asset_class_indices obtained from before
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$ForecastCSM <- cross_sectional_momentum(df$NP, df$A) * FDMcsm
df$ForecastCSM <- cap_forecast(df$ForecastCSM)
}
# Skewness (strategy 24)
if(weights[["Skew"]]  > 0) {
df$ForecastSkew <- multiple_Skew(df$Return) * FDMskew
df$ForecastSkew <- cap_forecast(df$ForecastSkew)
}
if(weights[["Test"]]  > 0) {
df$ForecastTest <- -multiple_CR(df$Return)
df$ForecastTest <- cap_forecast(df$ForecastTest)
}
{  # Tests
# # Kurtosis
# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   forecast <- rollapply(df$Return, width=20, kurt,  fill=NA, align="right")
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# COT
# COT <- read_csv("/home/marco/trading/Systems/Monopoly/COT.csv")
# select(COT, c("Market and Exchange Names", "As of Date in Form YYYY-MM-DD", "Noncommercial Positions-Long (All)","Noncommercial Positions-Short (All)", "Commercial Positions-Long (All)","Commercial Positions-Short (All)")) -> a
# colnames(a) <- c("Name", "Date", "NC_long", "NC_short", "C_long", "C_short")
# mutate(a, NC=NC_long/(NC_long+NC_short),C=C_long/(C_long+C_short) ) -> COT
# if(weights[["Test"]]  > 0) {
#     df$COT <- to_load[to_load$Symbol==symbol,]$COT %>% gsub('\"', '', .)
#     if(is.na(df$COT[1]) | symbol =="CL"| symbol =="KO"| symbol =="TG") {
#         df$ForecastTest <- 0
#
#     } else {
#     cot <- filter(COT, Name==df$COT[1])  %>%  select(Date, C)
#     df_ <- df
#     df_ <- merge(df_, cot, by="Date", all = TRUE, incomparables = NA)
#     df <- arrange(df_, Date) %>% mutate(C = na.locf(C, na.rm=F))
#     df$C <- lag(df$C );
#     r <- c(0,diff(log(df$C))); r[r==0] <- NA; r = na.locf(r, na.rm=F)
#     f <- AbsoluteStrength(df$C, 20) /  calculate_volatility(r) * 28
#     f <- multiple_AS(df$C, df$C, calculate_volatility(r))
#     forecast <- f
#     df$ForecastTest <- (forecast)
#     }
# }
}
# Final trade
df$Forecast <- ( weights[["Long"]] * df$ForecastLong +
weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest)
df$Forecast <- cap_forecast(df$Forecast * FDM)
# Directional filter
if(directional_only == 1)
df$Forecast <- ifelse(df$Forecast < 0, 0, df$Forecast)
else if(directional_only == -1)
df$Forecast <- ifelse(df$Forecast > 0, 0, df$Forecast)
# Penalize short positions
if(!is.null(short_penality)) {
df$Position <- ifelse(df$Forecast < 0, df$Position*short_penality, df$Position)
df$Position <- ifelse(df$Forecast > 0, df$Position*(1+(1-short_penality)), df$Position)
}
df$Excess <- lag(df$Position * df$Forecast/10) * df$Return * IDM
df <- filter(df, year(Date) >= starting_year)
forecasts[[symbol]]  <-   select(df, Date, Forecast)
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast/10) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
vols[[symbol]]  <-  select(df, Date, Volatility)
results[[symbol]] <- select(df, Date, Excess)
strategies[[symbol]]  <-  dplyr::select(df, Date, ForecastLong, ForecastTrend, ForecastCarry, ForecastCSM,ForecastSkew, ForecastTest)
} # end of symbol sloop
print("")
portfolio <- merge_portfolio_list(results)
portfolio_weights <- 1 / length(names(Assets)) # equal weights per instrument
res <- portfolio_summary(as.matrix(portfolio[,-1]) * portfolio_weights, dates = portfolio$Date, plot_stats = TRUE, symbol_wise = symbol_wise  )
print(res$Aggregate %>% unlist)
all_forecasts <- do.call(rbind,forecasts)[,2] %>% na.omit
avg_forecast_turnover <- round(252 * mean(abs(diff(all_forecasts/10))), 2)
avg_trade_turnover <- round(length(rle(all_forecasts>0)$length) / (length(all_forecasts)/252), 2)
print(paste("Average Forecast Turnover:", avg_forecast_turnover))
print(paste("Average Trade Turnover:", avg_trade_turnover))
if(symbol_wise) {
res$Symbols$Class <- lapply(Assets[names(results)], function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`, na.rm=T), SR_sd=sd(`Sharpe ratio`, na.rm=T)/sqrt(n())*2)
}
{
## Some figures takes from the Risk Management section
# Figure 97: Portfolio volatility, check it is in line with target volatility
# full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
# full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
# full_df_vols<- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), vols) %>% arrange(Date)
# a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
# plot.ts(a*100); abline(h=target_vol*100)
# a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
}
View(res$Symbols)
BackAdj <- read_rds("/home/marco/trading/HistoricalData/Barchart/BackAdj.RDS")
{
library(tidyverse)
library(mvtnorm)
library(quantmod)
library(forecast)
library(mvtnorm)
library(reshape2)
library(tsibble)
library(data.table)
library(ggthemes)
library(caTools)
source("/home/marco/trading/Systems//Common/Common.R")
source("/home/marco/trading/Systems//Common/Reports.R")
source("/home/marco/trading/Systems//Common/Indicators.R")
source("/home/marco/trading/Systems//Common/RiskManagement.R")
setwd("/home/marco/trading/Systems/Monopoly/")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
theme_set(theme_bw(base_size = 32))
}
BackAdj <- read_rds("/home/marco/trading/HistoricalData/Barchart/BackAdj.RDS")
BackAdj <- read_rds("/home/marco/trading/Systems/Monopoly/Data/RDSs/BackAdj.RDS")
BackAdj$VI -> VI
head(VI)
hist(VI$Difference)
a <- split(VI$Difference, 21)
a
?split
a <- split(VI$Difference, ceiling(seq_along(VI$Difference)/21))
a
a %>% length
b <- do.call(sum, a)
b
b <- lapply(a, sum)
b
b <- lapply(a, sum) %>% a
b <- lapply(a, sum) %>% unlis
b <- lapply(a, sum) %>% unlist
b
b %>% hist
a
seq_along(VI$Difference)
rets <- split(VI$Difference, ceiling(seq_along(VI$Difference)/21))
closes <- split(VI$Close, ceiling(seq_along(VI$Close)/21))
closes
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist)
b
plot(b)
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(-rets, sum) %>% unlist)
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`)
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1))
plot(b)
(1:10) %>% head(-4)
BackAdj$VI -> VI %>% tail((-5)
closes <- split(VI$Close, ceiling(seq_along(VI$Close)/21))
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1))
BackAdj$VI -> VI %>% tail(-5)
VI <- BackAdj$VI %>% tail(-5)
rets <- split(VI$Difference, ceiling(seq_along(VI$Difference)/21))
closes <- split(VI$Close, ceiling(seq_along(VI$Close)/21))
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1))
plot(b)
VI <- BackAdj$VI %>% tail(-8)
rets <- split(VI$Difference, ceiling(seq_along(VI$Difference)/21))
closes <- split(VI$Close, ceiling(seq_along(VI$Close)/21))
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1))
plot(b)
library(brms)
brm(formula = PnL ~ Level, data = b)
dim(b)
fit <- brm(formula = PnL ~ Level, data = b)
plot(fit)
plot(b$Level, b$PnL)
VI <- BackAdj$VI
rets <- split(VI$Difference, ceiling(seq_along(VI$Difference)/21))
closes <- split(VI$Close, ceiling(seq_along(VI$Close)/21))
b <- data.frame(Level=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1))
plot(b$Level, b$PnL)
plot(b$Level %>% log, b$PnL)
fit <- update(fit, data = b)
fit <- update(fit, newdata = b)
plot(fit)
fit <- update(fit, newdata = b %>% mutate(Level=log(Level)))
fit <- update(fit, newdata = b)
fit_ <- update(fit, newdata = b %>% mutate(Level=log(Level)))
plot(fit_)
plot(fit)
fit <- update(fit, newdata = b)
fit_ <- update(fit, newdata = b %>% mutate(Level=log(Level)))
plot(fit)
plot(fit_)
plot.ts(b$Level)
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
VIX
VI <- merge(VI, VIX, by="Date")
head(VI)
rets <- split(VI$Difference, ceiling(seq_along(VI$Difference)/21))
closes <- split(VI$VIX, ceiling(seq_along(VI$VIX)/21))
b <- data.frame(VIX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1))
plot(b$VXLevel %>% log, b$PnL)
plot(b$VIX, b$PnL)
plot(b$VIX, b$PnL*100)
1*10^4
plot(b$VIX, b$PnL*1000)
fit <- brm(formula = PnL ~ VIX, data = b)
plot(fit)
fit
b
b <- data.frame(VIX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) )
fit <- update(fit, newdata = b)
plot(fit)
rets <- split(VI$Difference, ceiling(seq_along(1:nrow(VI))/21))
vixes <- split(VI$VIX, ceiling(seq_along(1:nrow(VI))/21))
closes <- split(VI$Close, ceiling(seq_along(1:nrow(VI))/21))
b <- data.frame(VIX=lapply(closes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) )
library(rstanarm)
VI <- BackAdj$VI
VI <- merge(VI, VIX, by="Date")
rets <- split(VI$Difference, ceiling(seq_along(1:nrow(VI))/21))
vixes <- split(VI$VIX %>% lag, ceiling(seq_along(1:nrow(VI))/21))
closes <- split(VI$Close %>% lag, ceiling(seq_along(1:nrow(VI))/21))
b <- data.frame(VIX=lapply(closes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) )
plot(b$VIX, b$PnL*1000)
plot(b$VIX, b$PnL)
head(b)
fit <- brm(formula = PnL ~ VIX, data = b)
fit <- update(fit, newdata = b)
plot(fit)
fit
rets
{
VI <- BackAdj$VI
VI <- merge(VI, VIX, by="Date")
rets <- split(VI$Difference, ceiling(seq_along(1:nrow(VI))/21))
vixes <- split(VI$VIX %>% lag, ceiling(seq_along(1:nrow(VI))/21))
closes <- split(VI$Close %>% lag, ceiling(seq_along(1:nrow(VI))/21))
b <- data.frame(VIX=lapply(closes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) )
plot(b$VIX, b$PnL)
}
fit <- update(fit, newdata = b)
plot(fit)
{
VI <- BackAdj$VI
VI <- merge(VI, VIX, by="Date")
rets <- split(VI$Difference, ceiling(seq_along(1:nrow(VI))/21))
vixes <- split(VI$VIX %>% lag, ceiling(seq_along(1:nrow(VI))/21))
closes <- split(VI$Close %>% lag, ceiling(seq_along(1:nrow(VI))/21))
b <- data.frame(VIX=lapply(vixes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) )
plot(b$VIX, b$PnL)
}
fit <- update(fit, newdata = b)
plot(fit)
head()
head(b)
b <- data.frame(VIX=lapply(vixes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) ) %>% mutate(x=VIX, y=PnL)
fit <- brm(formula = y ~ x, data = b)
plot(fit)
fit_ <- update(fit, newdata = b %>% mutate(x=VX))
plot(fit_)
{
VI <- BackAdj$VI
VI <- merge(VI, VIX, by="Date")
rets <- split(VI$Difference, ceiling(seq_along(1:nrow(VI))/21))
vixes <- split(VI$VIX %>% lead, ceiling(seq_along(1:nrow(VI))/21))
closes <- split(VI$Close %>% lead, ceiling(seq_along(1:nrow(VI))/21))
b <- data.frame(VIX=lapply(vixes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) ) %>% mutate(x=VIX, y=PnL)
plot(b$VIX, b$PnL)
}
fit_ <- update(fit, newdata = b %>% mutate(x=VX))
plot(fit_)
fit_ <- update(fit, newdata = b)
plot(fit_)
VI <- merge(VI, VIX, by="Date") %>% mutate(Index = 1:21)
VI$Index <- 1:21
VI <- merge(VI, VIX, by="Date") %>% mutate(Index = rep(1:21, nrow(VI))
b <- data.frame(VIX=lapply(vixes, head, 1) %>% unlist, VX=lapply(closes, head, 1) %>% unlist, PnL=lapply(rets, sum) %>% unlist %>% `*`(-1000) ) %>% mutate(x=VIX, y=PnL)
VI <- merge(VI, VIX, by="Date") %>% mutate(Index = rep(1:21, nrow(VI)))
VI <- merge(VI, VIX, by="Date") %>% mutate(Index = rep(1:21, length.out=nrow(VI)))
VI
VI <- merge(VI, VIX, by="Date") %>% mutate(Index = rep(1:21, each=21, length.out=nrow(VI)))
VI
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(Index = rep(1:21, each=21, length.out=nrow(VI)))
VI
VI %>% group_by(Index) %>% reframe(VIX=first(lead(VIX)), VX=first(lead(VX)), PnL=sum(Difference)*-1000)
VI %>% group_by(Index) %>% reframe(VIX=first(lead(VIX)), VX=first(lead(Close)), PnL=sum(Difference)*-1000)
b <- VI %>% group_by(Index) %>% reframe(VIX=first(lead(VIX)), VX=first(lead(Close)), PnL=sum(Difference)*-1000)
plot(b$VIX, b$PnL)
View(VI)
VI <- merge(df, VIX, by="Date") %>% mutate(Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(lead(VIX)), VX=first(lead(Close)), PnL=sum(Difference)*-1000)
plot(b$VIX, b$PnL)
b <- VI %>% group_by(Index) %>% reframe(VIX=first(lead(VIX)), VX=first(lead(Close)), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
fit_ <- update(fit, newdata = b)
plot(b)
plot(fit_)
b <- VI %>% group_by(Index) %>% reframe(VIX=first((VIX)), VX=first((Close)), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$VIX, b$PnL)
fit_ <- update(fit, newdata = b)
plot(fit_)
b <- VI %>% group_by(Index) %>% reframe(VIX=first(lag(VIX)), VX=first(lag(Close)), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$VIX, b$PnL)
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(lag(VIX)), VX=first(lag(Close)), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$VIX, b$PnL)
}
plot(b$x, b$PnL)
b
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = lag(VIX), VX=lag(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
}
fit_ <- update(fit, newdata = b)
plot(fit_)
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = (VIX), VX=lag(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
fit_ <- update(fit, newdata = b)
plot(fit_)
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = lag(VIX), VX=lag(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
}
fit_ <- update(fit, newdata = b)
plot(fit_)
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = lag(VIX), VX=lag(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
}
plot(fit_)
fit_ <- update(fit, newdata = b)
plot(fit_)
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = lag(VIX), VX=lag(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
}
fit_ <- update(fit, newdata = b)
plot(fit_)
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = lag(VIX), VX=lag(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
}
fit_ <- update(fit, newdata = b)
plot(fit_)
{
VIX <- read_csv("/home/marco/trading/Systems/Options/Data//VIX.csv", show_col_types = F)  %>% select(Date, `Adj Close`) %>% rename(VIX=`Adj Close`)
df <- BackAdj$VI
VI <- merge(df, VIX, by="Date") %>% mutate(VIX = (VIX), VX=(Close), Index = rep(1:nrow(VI), each=21, length.out=nrow(VI)))
b <- VI %>% group_by(Index) %>% reframe(VIX=first(VIX), VX=first(VX), PnL=sum(Difference)*-1000) %>% mutate(x=VIX, y=PnL)
plot(b$x, b$PnL)
}
fit_ <- update(fit, newdata = b)
plot(fit_)
{
library(tidyverse)
library(Rfast)
library(TTR)
library(lubridate)
library(tsibble)
library(zoo)
library(moments)
library(ggthemes)
library(Rfast)
source("/home/marco/trading/Systems//Common/Indicators.R")
source("/home/marco/trading/Systems//Common/Reports.R")
source("/home/marco/trading/Systems//Common/RiskManagement.R")
}
{
library(tidyverse)
library(mvtnorm)
library(quantmod)
library(forecast)
library(mvtnorm)
library(reshape2)
library(tsibble)
library(data.table)
library(ggthemes)
library(caTools)
source("/home/marco/trading/Systems//Common/Common.R")
source("/home/marco/trading/Systems//Common/Reports.R")
source("/home/marco/trading/Systems//Common/Indicators.R")
source("/home/marco/trading/Systems//Common/RiskManagement.R")
setwd("/home/marco/trading/Systems/Monopoly/")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
theme_set(theme_bw(base_size = 32))
}
BackAdj <- read_rds("/home/marco/trading/Systems/Monopoly/Data/RDSs/BackAdj.RDS")
setwd("/home/marco/trading/Systems/Monopoly/")
dir.create("Plots/Seasonalty")
setwd("Plots/Seasonalty")
symbol
df <- BackAdj[[symbol]] %>% filter(year(Date) > 2000)
df$Volatility <- calculate_volatility(df$Return)
df$Return <- df$Return / df$Volatility * sqrt(252) # Seasonality adjusted, comment it if unwanted
a <- mutate(df, dom = mday(Date)) %>% mutate(W = case_when(dom <= 5 ~ 1, dom >= 27 ~ -1, TRUE ~ 0)) %>% group_by(W) %>% summarise(Week=first(W), Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()))
a
a <- mutate(df, dom = mday(Date)) %>% mutate(W = case_when(dom <= 5 ~ 1, dom >= 27 ~ -1, TRUE ~ 0)) %>% group_by(W) %>% summarise(Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()))
a
a <- mutate(df, dom = mday(Date)) %>% mutate(W = case_when(dom <= 5 ~ "BOM", dom >= 27 ~ "EOM", TRUE ~ NA)) %>% group_by(W) %>% summarise(Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n())) %>% na.omit
a
ggplot(a) + geom_bar(aes(W, Mean), stat="identity") + geom_errorbar(aes(x=W, ymin=Mean-SD, ymax=Mean+SD), width=0.5)
mutate(df, dom = mday(Date)) %>% mutate(W = case_when(dom <= 5 ~ "BOM", dom >= 27 ~ "EOM", TRUE ~ NA)) %>% group_by(W) %>% summarise(Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()), n()) %>% na.omit
mutate(df, dom = mday(Date))
mutate(df, dom = yearmon(Date))
mutate(df, dom = yearmonth(Date))
for(symbol in names(BackAdj)){
print(symbol)
df <- BackAdj[[symbol]] %>% filter(year(Date) > 2000)
df$Volatility <- calculate_volatility(df$Return)
df$Return <- df$Return / df$Volatility * sqrt(252) # Seasonality adjusted, comment it if unwanted
a <- mutate(df, dom = mday(Date)) %>% mutate(W = case_when(dom <= 5 ~ "BOM", dom >= 27 ~ "EOM", TRUE ~ NA)) %>% group_by(W) %>% summarise(Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n())) %>% na.omit
p <- ggplot(a) + geom_bar(aes(W, Mean), stat="identity") + geom_errorbar(aes(x=W, ymin=Mean-SD, ymax=Mean+SD), width=0.5)
ggsave(filename = paste0(symbol, "_TOM.png"), p, width=12, height=9,dpi=150)
next
a <- group_by(df, week(Date)) %>% summarise(Week=first(week(Date)), Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()))
p <- ggplot(a) + geom_bar(aes(Week, Mean), stat="identity") + geom_errorbar(aes(x=Week, ymin=Mean-SD, ymax=Mean+SD), width=0.5)
ggsave(filename = paste0(symbol, "_yearly.png"), p, width=12, height=9,dpi=150)
a <- group_by(df, mday(Date)) %>% summarise(Day=first(mday(Date)), Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()))
p <- ggplot(a) + geom_bar(aes(Day, Mean), stat="identity") + geom_errorbar(aes(x=Day, ymin=Mean-SD, ymax=Mean+SD), width=0.5)
ggsave(filename = paste0(symbol, "_mday.png"), p, width=12, height=9,dpi=150)
a <- group_by(df, wday(Date)) %>% summarise(Day=first(wday(Date)), Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()))
p <- ggplot(a) + geom_bar(aes(Day, Mean), stat="identity") + geom_errorbar(aes(x=Day, ymin=Mean-SD, ymax=Mean+SD), width=0.5)
ggsave(filename = paste0(symbol, "_wday.png"), p, width=12, height=9,dpi=150)
a <- mutate(df, dom = mday(Date)) %>% mutate(W = case_when(dom <= 7 ~ 1, dom > 7 & dom <= 14 ~ 2, dom > 14 & dom <= 21 ~ 3, dom > 21 & dom <= 31 ~ 4, TRUE ~ 0)) %>% group_by(W) %>% summarise(Week=first(W), Mean=mean(Return, na.rm=T), SD=2*sd(Return, na.rm=T)/sqrt(n()))
p <- ggplot(a) + geom_bar(aes(Week, Mean), stat="identity") + geom_errorbar(aes(x=Week, ymin=Mean-SD, ymax=Mean+SD), width=0.5)
ggsave(filename = paste0(symbol, "_weekmonth.png"), p, width=12, height=9,dpi=150)
}
