df <- merge(df, filter(Asset_class_indices, Class==df$Class[1]) %>%  select(Date, A), by="Date") # Asset_class_indices obtained from before
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$ForecastCSM <- cross_sectional_momentum(df$NP, df$A) * FDMcsm
df$ForecastCSM <- cap_forecast(df$ForecastCSM)
}
# Skewness (strategy 24)
if(weights[["Skew"]]  > 0) {
df$ForecastSkew <- multiple_Skew(df$Return) * FDMskew
df$ForecastSkew <- cap_forecast(df$ForecastSkew)
}
if(weights[["Test"]]  > 0) {
rate <- 256*7
if(nrow(df) >= rate) {
forecast <- c(rep(NA, rate), diff(df$AdjClose, lag=rate)) / (rate)
forecast <- EMA(-forecast / df$Volatility, 64)
df$ForecastTest <- cap_forecast(forecast*10)
}
{  # Tests
# # Kurtosis
# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   forecast <- rollapply(df$Return, width=20, kurt,  fill=NA, align="right")
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# COT
# COT <- read_csv("/home/marco/trading/Systems/Monopoly/COT.csv")
# select(COT, c("Market and Exchange Names", "As of Date in Form YYYY-MM-DD", "Noncommercial Positions-Long (All)","Noncommercial Positions-Short (All)", "Commercial Positions-Long (All)","Commercial Positions-Short (All)")) -> a
# colnames(a) <- c("Name", "Date", "NC_long", "NC_short", "C_long", "C_short")
# mutate(a, NC=NC_long/(NC_long+NC_short),C=C_long/(C_long+C_short) ) -> COT
# if(weights[["Test"]]  > 0) {
#     df$COT <- to_load[to_load$Symbol==symbol,]$COT %>% gsub('\"', '', .)
#     if(is.na(df$COT[1]) | symbol =="CL"| symbol =="KO"| symbol =="TG") {
#         df$ForecastTest <- 0
#
#     } else {
#     cot <- filter(COT, Name==df$COT[1])  %>%  select(Date, C)
#     df_ <- df
#     df_ <- merge(df_, cot, by="Date", all = TRUE, incomparables = NA)
#     df <- arrange(df_, Date) %>% mutate(C = na.locf(C, na.rm=F))
#     df$C <- lag(df$C );
#     r <- c(0,diff(log(df$C))); r[r==0] <- NA; r = na.locf(r, na.rm=F)
#     f <- AbsoluteStrength(df$C, 20) /  calculate_volatility(r) * 28
#     f <- multiple_AS(df$C, df$C, calculate_volatility(r))
#     forecast <- f
#     df$ForecastTest <- (forecast)
#     }
# }
}
# Final trade
df$Forecast <- ( weights[["Long"]] * df$ForecastLong +
weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest)
df$Forecast <- cap_forecast(df$Forecast * FDM)
# Directional filter
if(directional_only == 1)
df$Forecast <- ifelse(df$Forecast < 0, 0, df$Forecast)
else if(directional_only == -1)
df$Forecast <- ifelse(df$Forecast > 0, 0, df$Forecast)
# Penalize short positions
if(!is.null(short_penality)) {
df$Position <- ifelse(df$Forecast < 0, df$Position*short_penality, df$Position)
df$Position <- ifelse(df$Forecast > 0, df$Position*(1+(1-short_penality)), df$Position)
}
df$ForecastRaw <- df$Forecast
df$ForecastRaw[is.na(df$ForecastRaw)] <- 0
df$Forecast[is.na(df$Forecast)] <- 0
# Simulate buffering
{
df$Forecast <- rep(0, length(df$ForecastRaw));
if(position_buffering > 0) {
for(i in 2:length(df$ForecastRaw)) {
df$Forecast[i] <- df$Forecast[i-1];
if(abs(df$Forecast[i] - df$ForecastRaw[i]) >= position_buffering)
df$Forecast[i] <- df$ForecastRaw[i];
}
else {
df$Forecast <- df$ForecastRaw }
}
df$Excess <- lag(df$Position * df$Forecast/10) * df$Return * IDM
df <- filter(df, year(Date) >= starting_year)
forecasts[[symbol]]  <-   select(df, Date, Forecast)
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast/10) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
vols[[symbol]]  <-  select(df, Date, Volatility)
results[[symbol]] <- select(df, Date, Excess)
strategies[[symbol]]  <-  dplyr::select(df, Date, ForecastLong, ForecastTrend, ForecastCarry, ForecastCSM,ForecastSkew, ForecastTest)
} # end of symbol sloop
print("")
portfolio <- merge_portfolio_list(results)
portfolio_weights <- 1 / length(names(Assets)) # equal weights per instrument
res <- portfolio_summary(as.matrix(portfolio[,-1]) * portfolio_weights, dates = portfolio$Date, plot_stats = TRUE, symbol_wise = symbol_wise  )
print(res$Aggregate %>% unlist)
all_forecasts <- do.call(rbind,forecasts)[,2] %>% na.omit
avg_forecast_turnover <- round(252 * mean(abs(diff(all_forecasts/10))), 2)
avg_trade_turnover <- round(length(rle(all_forecasts>0)$length) / (length(all_forecasts)/252), 2)
print(paste("Average Forecast Turnover:", avg_forecast_turnover))
print(paste("Average Trade Turnover:", avg_trade_turnover))
if(symbol_wise) {
res$Symbols$Class <- lapply(Assets[names(results)], function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`, na.rm=T), SR_sd=sd(`Sharpe ratio`, na.rm=T)/sqrt(n())*2)
}
{
## Some figures takes from the Risk Management section
# Figure 97: Portfolio volatility, check it is in line with target volatility
# full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
# full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
# full_df_vols<- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), vols) %>% arrange(Date)
# a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
# plot.ts(a*100); abline(h=target_vol*100)
# a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
}
# Final Backtest
{
# A subset of instrument I might actually trade
CMC_selection_ <- c("ZN","G","GG","CC","CA","KC","RM","HG","ZC","CT","CL","RB","HO", "LF", "PL","PA",
"SI", "GC","HE","GF", "LE","LS","NG","ZO", "OJ","ZR","ZS","ZL","ZC","SW","ZM",
"ES","ZW","HS","NY","LX", "BT")
CMC_selection <- c("ZF","CC","RM","HG","CT","CL","GC","HE","GF","NG","OJ","ZR","SW","ZW","ZS","HS","ES","NY")
Assets_all <- BackAdj
Assets <- BackAdj#[CMC_selection] #CMC[CMC_selection] #
results <- list();  forecasts <- list();  exposures <- list();returns <- list(); vols <- list();strategies <- list()
target_vol <- 0.20
IDM = 2.4
FDMtrend <- 1.75 #1.33
FDMcarry <- 1.05
FDMcsm <- 1.4
FDMskew <- 1.18
FDM <- 1.0 # 1.5
starting_year <- 2000
directional_only <- 0 # 0: bidirectional, -1: short only, 1: long only
position_buffering <- 0
# Penalize short positions (NULL to disable)
short_penality <- NULL
# Apply relative volatility
relative_vol <- FALSE
# Symbol-wise results
symbol_wise <- TRUE
# Strategies weights
weights <- list("Long"=0, "Trend"=0, "Carry"=0, "Skew"=0, "CSM"=0,"Test"=1)
#weights <- list("Long"=0, "Trend"=0, "Carry"=0, "Skew"=1, "CSM"=0,"Test"=0)
if(sum(unlist(weights)) != 1)
stop("Strategy weights do not sum to zero")
# Asset class indices
if(weights[["CSM"]] > 0) {
NPs <- list()
for(n in names(Assets_all)) {
df <- Assets_all[[n]]
df$Volatility = calculate_volatility(df$Return)
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$dNP = c(0, diff(df$NP))
NPs[[n]] <- select(df, Date, Symbol, Class, NP, dNP)
}
allNPs <- do.call(rbind, NPs)
Asset_class_indices <- group_by(allNPs, Class, Date) %>% reframe(Symbol=Symbol, R=mean(dNP)) %>%
arrange(Class, Date) %>% select(-Symbol)  %>%  unique %>% group_by( Class) %>% mutate(A=cumsum(R)) %>% ungroup()
}
# iterate over symbols
for(symbol in names(Assets)) {
cat(paste(symbol, ""))
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = target_vol / df$Volatility
df$Return[is.na(df$Return)] <- 0
df$ForecastLong <- df$ForecastTrend <- df$ForecastCarry <- df$ForecastCSM <- df$ForecastSkew <- df$ForecastTest <- 0
# Relative volatility (strategy 13, improvement is minimal, and we only apply it to trend)
df$M <- 1
if(relative_vol) {
# Carver version
df$RV <- relative_volatility(df$Volatility)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# My version
# df$RV <- runquantile(df$Volatility, k = 252, probs = c(0.25,0.5,0.75), align="right")
# df <- mutate(df, M=case_when(Volatility < RV[,1] ~ 1.5,
#                                 Volatility < RV[,2] & Volatility > RV[,1] ~ 1.25,
#                                 Volatility < RV[,3] & Volatility > RV[,2] ~ 0.75,
#                                 Volatility > RV[,3] ~ 0.5,  TRUE ~ NA))
}
# Long-only
if(weights[["Long"]]  > 0) {
df$ForecastLong <- runif(n = nrow(df), 5, 15)
}
# Trend-following (strategy 9)
if(weights[["Trend"]]  > 0) {
df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastEMA, df$ForecastDC), na.rm = T) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
}
# Carry (strategy 10)
if(weights[["Carry"]]  > 0) {
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
}
# Cross-sectional momentum (strategy 19)
if(weights[["CSM"]]  > 0) {
df <- merge(df, filter(Asset_class_indices, Class==df$Class[1]) %>%  select(Date, A), by="Date") # Asset_class_indices obtained from before
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$ForecastCSM <- cross_sectional_momentum(df$NP, df$A) * FDMcsm
df$ForecastCSM <- cap_forecast(df$ForecastCSM)
}
# Skewness (strategy 24)
if(weights[["Skew"]]  > 0) {
df$ForecastSkew <- multiple_Skew(df$Return) * FDMskew
df$ForecastSkew <- cap_forecast(df$ForecastSkew)
}
if(weights[["Test"]]  > 0) {
rate <- 256*1
if(nrow(df) >= rate) {
forecast <- c(rep(NA, rate), diff(df$AdjClose, lag=rate)) / (rate)
forecast <- EMA(-forecast / df$Volatility, 64)
df$ForecastTest <- cap_forecast(forecast*10)
}
{  # Tests
# # Kurtosis
# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   forecast <- rollapply(df$Return, width=20, kurt,  fill=NA, align="right")
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# COT
# COT <- read_csv("/home/marco/trading/Systems/Monopoly/COT.csv")
# select(COT, c("Market and Exchange Names", "As of Date in Form YYYY-MM-DD", "Noncommercial Positions-Long (All)","Noncommercial Positions-Short (All)", "Commercial Positions-Long (All)","Commercial Positions-Short (All)")) -> a
# colnames(a) <- c("Name", "Date", "NC_long", "NC_short", "C_long", "C_short")
# mutate(a, NC=NC_long/(NC_long+NC_short),C=C_long/(C_long+C_short) ) -> COT
# if(weights[["Test"]]  > 0) {
#     df$COT <- to_load[to_load$Symbol==symbol,]$COT %>% gsub('\"', '', .)
#     if(is.na(df$COT[1]) | symbol =="CL"| symbol =="KO"| symbol =="TG") {
#         df$ForecastTest <- 0
#
#     } else {
#     cot <- filter(COT, Name==df$COT[1])  %>%  select(Date, C)
#     df_ <- df
#     df_ <- merge(df_, cot, by="Date", all = TRUE, incomparables = NA)
#     df <- arrange(df_, Date) %>% mutate(C = na.locf(C, na.rm=F))
#     df$C <- lag(df$C );
#     r <- c(0,diff(log(df$C))); r[r==0] <- NA; r = na.locf(r, na.rm=F)
#     f <- AbsoluteStrength(df$C, 20) /  calculate_volatility(r) * 28
#     f <- multiple_AS(df$C, df$C, calculate_volatility(r))
#     forecast <- f
#     df$ForecastTest <- (forecast)
#     }
# }
}
# Final trade
df$Forecast <- ( weights[["Long"]] * df$ForecastLong +
weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest)
df$Forecast <- cap_forecast(df$Forecast * FDM)
# Directional filter
if(directional_only == 1)
df$Forecast <- ifelse(df$Forecast < 0, 0, df$Forecast)
else if(directional_only == -1)
df$Forecast <- ifelse(df$Forecast > 0, 0, df$Forecast)
# Penalize short positions
if(!is.null(short_penality)) {
df$Position <- ifelse(df$Forecast < 0, df$Position*short_penality, df$Position)
df$Position <- ifelse(df$Forecast > 0, df$Position*(1+(1-short_penality)), df$Position)
}
df$ForecastRaw <- df$Forecast
df$ForecastRaw[is.na(df$ForecastRaw)] <- 0
df$Forecast[is.na(df$Forecast)] <- 0
# Simulate buffering
{
df$Forecast <- rep(0, length(df$ForecastRaw));
if(position_buffering > 0) {
for(i in 2:length(df$ForecastRaw)) {
df$Forecast[i] <- df$Forecast[i-1];
if(abs(df$Forecast[i] - df$ForecastRaw[i]) >= position_buffering)
df$Forecast[i] <- df$ForecastRaw[i];
}
else {
df$Forecast <- df$ForecastRaw }
}
df$Excess <- lag(df$Position * df$Forecast/10) * df$Return * IDM
df <- filter(df, year(Date) >= starting_year)
forecasts[[symbol]]  <-   select(df, Date, Forecast)
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast/10) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
vols[[symbol]]  <-  select(df, Date, Volatility)
results[[symbol]] <- select(df, Date, Excess)
strategies[[symbol]]  <-  dplyr::select(df, Date, ForecastLong, ForecastTrend, ForecastCarry, ForecastCSM,ForecastSkew, ForecastTest)
} # end of symbol sloop
print("")
portfolio <- merge_portfolio_list(results)
portfolio_weights <- 1 / length(names(Assets)) # equal weights per instrument
res <- portfolio_summary(as.matrix(portfolio[,-1]) * portfolio_weights, dates = portfolio$Date, plot_stats = TRUE, symbol_wise = symbol_wise  )
print(res$Aggregate %>% unlist)
all_forecasts <- do.call(rbind,forecasts)[,2] %>% na.omit
avg_forecast_turnover <- round(252 * mean(abs(diff(all_forecasts/10))), 2)
avg_trade_turnover <- round(length(rle(all_forecasts>0)$length) / (length(all_forecasts)/252), 2)
print(paste("Average Forecast Turnover:", avg_forecast_turnover))
print(paste("Average Trade Turnover:", avg_trade_turnover))
if(symbol_wise) {
res$Symbols$Class <- lapply(Assets[names(results)], function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`, na.rm=T), SR_sd=sd(`Sharpe ratio`, na.rm=T)/sqrt(n())*2)
}
{
## Some figures takes from the Risk Management section
# Figure 97: Portfolio volatility, check it is in line with target volatility
# full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
# full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
# full_df_vols<- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), vols) %>% arrange(Date)
# a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
# plot.ts(a*100); abline(h=target_vol*100)
# a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
}
# Final Backtest
{
# A subset of instrument I might actually trade
CMC_selection_ <- c("ZN","G","GG","CC","CA","KC","RM","HG","ZC","CT","CL","RB","HO", "LF", "PL","PA",
"SI", "GC","HE","GF", "LE","LS","NG","ZO", "OJ","ZR","ZS","ZL","ZC","SW","ZM",
"ES","ZW","HS","NY","LX", "BT")
CMC_selection <- c("ZF","CC","RM","HG","CT","CL","GC","HE","GF","NG","OJ","ZR","SW","ZW","ZS","HS","ES","NY")
Assets_all <- BackAdj
Assets <- BackAdj#[CMC_selection] #CMC[CMC_selection] #
results <- list();  forecasts <- list();  exposures <- list();returns <- list(); vols <- list();strategies <- list()
target_vol <- 0.20
IDM = 2.4
FDMtrend <- 1.75 #1.33
FDMcarry <- 1.05
FDMcsm <- 1.4
FDMskew <- 1.18
FDM <- 1.0 # 1.5
starting_year <- 2000
directional_only <- 0 # 0: bidirectional, -1: short only, 1: long only
position_buffering <- 0
# Penalize short positions (NULL to disable)
short_penality <- NULL
# Apply relative volatility
relative_vol <- FALSE
# Symbol-wise results
symbol_wise <- TRUE
# Strategies weights
weights <- list("Long"=0, "Trend"=0, "Carry"=0, "Skew"=0, "CSM"=0,"Test"=1)
#weights <- list("Long"=0, "Trend"=0, "Carry"=0, "Skew"=1, "CSM"=0,"Test"=0)
if(sum(unlist(weights)) != 1)
stop("Strategy weights do not sum to zero")
# Asset class indices
if(weights[["CSM"]] > 0) {
NPs <- list()
for(n in names(Assets_all)) {
df <- Assets_all[[n]]
df$Volatility = calculate_volatility(df$Return)
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$dNP = c(0, diff(df$NP))
NPs[[n]] <- select(df, Date, Symbol, Class, NP, dNP)
}
allNPs <- do.call(rbind, NPs)
Asset_class_indices <- group_by(allNPs, Class, Date) %>% reframe(Symbol=Symbol, R=mean(dNP)) %>%
arrange(Class, Date) %>% select(-Symbol)  %>%  unique %>% group_by( Class) %>% mutate(A=cumsum(R)) %>% ungroup()
}
# iterate over symbols
for(symbol in names(Assets)) {
cat(paste(symbol, ""))
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = target_vol / df$Volatility
df$Return[is.na(df$Return)] <- 0
df$ForecastLong <- df$ForecastTrend <- df$ForecastCarry <- df$ForecastCSM <- df$ForecastSkew <- df$ForecastTest <- 0
# Relative volatility (strategy 13, improvement is minimal, and we only apply it to trend)
df$M <- 1
if(relative_vol) {
# Carver version
df$RV <- relative_volatility(df$Volatility)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# My version
# df$RV <- runquantile(df$Volatility, k = 252, probs = c(0.25,0.5,0.75), align="right")
# df <- mutate(df, M=case_when(Volatility < RV[,1] ~ 1.5,
#                                 Volatility < RV[,2] & Volatility > RV[,1] ~ 1.25,
#                                 Volatility < RV[,3] & Volatility > RV[,2] ~ 0.75,
#                                 Volatility > RV[,3] ~ 0.5,  TRUE ~ NA))
}
# Long-only
if(weights[["Long"]]  > 0) {
df$ForecastLong <- runif(n = nrow(df), 5, 15)
}
# Trend-following (strategy 9)
if(weights[["Trend"]]  > 0) {
df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastEMA, df$ForecastDC), na.rm = T) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
}
# Carry (strategy 10)
if(weights[["Carry"]]  > 0) {
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
}
# Cross-sectional momentum (strategy 19)
if(weights[["CSM"]]  > 0) {
df <- merge(df, filter(Asset_class_indices, Class==df$Class[1]) %>%  select(Date, A), by="Date") # Asset_class_indices obtained from before
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$ForecastCSM <- cross_sectional_momentum(df$NP, df$A) * FDMcsm
df$ForecastCSM <- cap_forecast(df$ForecastCSM)
}
# Skewness (strategy 24)
if(weights[["Skew"]]  > 0) {
df$ForecastSkew <- multiple_Skew(df$Return) * FDMskew
df$ForecastSkew <- cap_forecast(df$ForecastSkew)
}
if(weights[["Test"]]  > 0) {
rate <- 256*10
if(nrow(df) >= rate) {
forecast <- c(rep(NA, rate), diff(df$AdjClose, lag=rate)) / (rate)
forecast <- EMA(-forecast / df$Volatility, 64)
df$ForecastTest <- cap_forecast(forecast*10)
}
{  # Tests
# # Kurtosis
# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   forecast <- rollapply(df$Return, width=20, kurt,  fill=NA, align="right")
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# COT
# COT <- read_csv("/home/marco/trading/Systems/Monopoly/COT.csv")
# select(COT, c("Market and Exchange Names", "As of Date in Form YYYY-MM-DD", "Noncommercial Positions-Long (All)","Noncommercial Positions-Short (All)", "Commercial Positions-Long (All)","Commercial Positions-Short (All)")) -> a
# colnames(a) <- c("Name", "Date", "NC_long", "NC_short", "C_long", "C_short")
# mutate(a, NC=NC_long/(NC_long+NC_short),C=C_long/(C_long+C_short) ) -> COT
# if(weights[["Test"]]  > 0) {
#     df$COT <- to_load[to_load$Symbol==symbol,]$COT %>% gsub('\"', '', .)
#     if(is.na(df$COT[1]) | symbol =="CL"| symbol =="KO"| symbol =="TG") {
#         df$ForecastTest <- 0
#
#     } else {
#     cot <- filter(COT, Name==df$COT[1])  %>%  select(Date, C)
#     df_ <- df
#     df_ <- merge(df_, cot, by="Date", all = TRUE, incomparables = NA)
#     df <- arrange(df_, Date) %>% mutate(C = na.locf(C, na.rm=F))
#     df$C <- lag(df$C );
#     r <- c(0,diff(log(df$C))); r[r==0] <- NA; r = na.locf(r, na.rm=F)
#     f <- AbsoluteStrength(df$C, 20) /  calculate_volatility(r) * 28
#     f <- multiple_AS(df$C, df$C, calculate_volatility(r))
#     forecast <- f
#     df$ForecastTest <- (forecast)
#     }
# }
}
# Final trade
df$Forecast <- ( weights[["Long"]] * df$ForecastLong +
weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest)
df$Forecast <- cap_forecast(df$Forecast * FDM)
# Directional filter
if(directional_only == 1)
df$Forecast <- ifelse(df$Forecast < 0, 0, df$Forecast)
else if(directional_only == -1)
df$Forecast <- ifelse(df$Forecast > 0, 0, df$Forecast)
# Penalize short positions
if(!is.null(short_penality)) {
df$Position <- ifelse(df$Forecast < 0, df$Position*short_penality, df$Position)
df$Position <- ifelse(df$Forecast > 0, df$Position*(1+(1-short_penality)), df$Position)
}
df$ForecastRaw <- df$Forecast
df$ForecastRaw[is.na(df$ForecastRaw)] <- 0
df$Forecast[is.na(df$Forecast)] <- 0
# Simulate buffering
{
df$Forecast <- rep(0, length(df$ForecastRaw));
if(position_buffering > 0) {
for(i in 2:length(df$ForecastRaw)) {
df$Forecast[i] <- df$Forecast[i-1];
if(abs(df$Forecast[i] - df$ForecastRaw[i]) >= position_buffering)
df$Forecast[i] <- df$ForecastRaw[i];
}
else {
df$Forecast <- df$ForecastRaw }
}
df$Excess <- lag(df$Position * df$Forecast/10) * df$Return * IDM
df <- filter(df, year(Date) >= starting_year)
forecasts[[symbol]]  <-   select(df, Date, Forecast)
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast/10) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
vols[[symbol]]  <-  select(df, Date, Volatility)
results[[symbol]] <- select(df, Date, Excess)
strategies[[symbol]]  <-  dplyr::select(df, Date, ForecastLong, ForecastTrend, ForecastCarry, ForecastCSM,ForecastSkew, ForecastTest)
} # end of symbol sloop
print("")
portfolio <- merge_portfolio_list(results)
portfolio_weights <- 1 / length(names(Assets)) # equal weights per instrument
res <- portfolio_summary(as.matrix(portfolio[,-1]) * portfolio_weights, dates = portfolio$Date, plot_stats = TRUE, symbol_wise = symbol_wise  )
print(res$Aggregate %>% unlist)
all_forecasts <- do.call(rbind,forecasts)[,2] %>% na.omit
avg_forecast_turnover <- round(252 * mean(abs(diff(all_forecasts/10))), 2)
avg_trade_turnover <- round(length(rle(all_forecasts>0)$length) / (length(all_forecasts)/252), 2)
print(paste("Average Forecast Turnover:", avg_forecast_turnover))
print(paste("Average Trade Turnover:", avg_trade_turnover))
if(symbol_wise) {
res$Symbols$Class <- lapply(Assets[names(results)], function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`, na.rm=T), SR_sd=sd(`Sharpe ratio`, na.rm=T)/sqrt(n())*2)
}
{
## Some figures takes from the Risk Management section
# Figure 97: Portfolio volatility, check it is in line with target volatility
# full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
# full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
# full_df_vols<- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), vols) %>% arrange(Date)
# a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
# plot.ts(a*100); abline(h=target_vol*100)
# a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
}
