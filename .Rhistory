}
all$ca %>% colnames
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
all$ca$Excess
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))]
excesses
tail(excesses)
colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = TRUE  )
res <- portfolio_summary(as.matrix(excesses[,-1]), dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
portfolio_weights
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
print(res$Aggregate %>% unlist)
# iterate over data and calculate positions
print("Calculate new positions...")
all <- list()
results <- list()
for(symbol in names(instruments_data)) {
cat(paste(symbol, ""))
df <- instruments_data[[symbol]][[1]]
hc <- instruments_data[[symbol]][[2]]
df$Symbol <- symbol
df$ForecastTrend <- df$ForecastCarry <- df$ForecastSkew <- df$Forecast <- df$PositionMax <- df$PositionOptimal <- df$PositionOptimized <- df$AdjFactor  <- df$RequiredTrade <- df$Buffer <- df$Trading <- df$PositionPrevious <- df$PositionUnrounded <- df$Position <- df$PositionChange <- df$PositionRisk  <- 0
df$Return <- c(0, diff(log(df$Close)))
df$Return[df$Period=="Weekly"]  <- df$Return[df$Period=="Weekly"] * 4.84 # adjust weekly data to daily volatility (4.84=252/52). Not sure if correct and/or necessary
df$Volatility <- calculate_volatility(df$Return)
df$Period <- NULL
fx <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(FX)
if(fx == "EUR") {
df$FX <- 1
} else {
df$FX <- dplyr::filter(FX_rates, FX == fx) %>% pull(Rate)
}
df$Weight <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Weight)
df$Product <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Product)
df$ContractSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(ContractSize)
df$PositionMin <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(PositionMin)
df$PositionTick <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(PositionTick)
df$Spread <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Spread)
df$Commission <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Commission)
df$CostPerTrade <- (df$Spread / 2 + df$Commission)
# Relative volatility (strategy 13, it does not seems to add much)
{
# df$M <- 1
# df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
# df$RV <- df$Volatility / runMean(df$Volatility, 252)
# df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
# df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Trend-following (strategy 9)
df$multiple_EMA <- multiple_EMA(df$Close, df$Close, df$Volatility)
df$multiple_DC <- multiple_DC(df$Close, df$Close, df$Volatility)
df$multiple_KF <- multiple_KF(df$Close, df$Close, df$Volatility)
df$multiple_TII <- multiple_TII(df$Close, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$multiple_EMA, df$multiple_DC, df$multiple_KF, df$multiple_TII), na.rm=T)
df$ForecastTrend <- cap_forecast(df$ForecastTrend * FDMtrend)
# Carry
# It is based on cash contract interest rate, we remove the 3% commission, so low volatility assets like
# bonds are not negatively affected in this analysis. Of course low volatility assets must be played on the future contract
# if you want to obtain the carry, as interest rates of the cash are always negative (because of the 3% commission that
# is higher than the volatility itself). For high volatility assets you can choose between cash or future.
hc_max <- which.max(hc)
hc_commission <- case_when(
df$Product[1] == "Cash" ~ 0,
df$Product[1] == "Index" ~ 0.03,
df$Product[1] == "Future" ~ 0.03,
TRUE ~ NA_real_)
hc_value <- (hc[hc_max]+hc_commission)
# When carry is always against us (both long and short charge us), we assume it is zero
if(hc_value < 0)
hc_value <- 0
df$ForecastCarry <- ifelse(hc_max == 1, 1, -1) * hc_value / df$Volatility * 10
df$ForecastCarry <- cap_forecast(df$ForecastCarry * FDMcarry)
# Skewness (strategy 24)
df$ForecastSkew <- multiple_Skew(df$Return)
df$ForecastSkew <- cap_forecast(df$ForecastSkew * FDMskew)
# Final trade
df$Forecast <- (
strategy_weights$Trend * df$ForecastTrend +
strategy_weights$Carry * df$ForecastCarry +
strategy_weights$Skew  * df$ForecastSkew   ) * FDM
df$Forecast <- cap_forecast(df$Forecast)
df$InstCapital <- capital * df$Weight * IDM
df$Exposure <- df$InstCapital * target_vol/df$Volatility
df$PositionOptimal <-  (df$Exposure * df$FX * df$Forecast/10) /
(df$ContractSize * df$Close)
df$PositionMax <- (df$Exposure * df$FX * 20/10) /
(df$ContractSize * df$Close)
df$Buffer <- (df$Exposure * df$FX * position_buffering_level/10) / (df$ContractSize * df$Close)
df$Buffer <-  ifelse(df$Buffer < df$PositionMin, df$PositionMin, df$Buffer)
all[[symbol]] <- df
if(!dry_run)
write_csv(df, paste0(current_dir, "/", symbol, ".csv"))
# Be careful, now it is reverse-date sorted, you cannot run any other function like EMA etc..
df <- arrange(df, desc(Date))
results[[symbol]] <- df[1,]
}
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
colnames(excesses) <- c("Date", names(all))
excesses <- df[,grep("^Date|^Excess", colnames(df))]
colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
FDMcarry <- 0
dry_run
dry_run <- TRUE
# iterate over data and calculate positions
print("Calculate new positions...")
all <- list()
results <- list()
for(symbol in names(instruments_data)) {
cat(paste(symbol, ""))
df <- instruments_data[[symbol]][[1]]
hc <- instruments_data[[symbol]][[2]]
df$Symbol <- symbol
df$ForecastTrend <- df$ForecastCarry <- df$ForecastSkew <- df$Forecast <- df$PositionMax <- df$PositionOptimal <- df$PositionOptimized <- df$AdjFactor  <- df$RequiredTrade <- df$Buffer <- df$Trading <- df$PositionPrevious <- df$PositionUnrounded <- df$Position <- df$PositionChange <- df$PositionRisk  <- 0
df$Return <- c(0, diff(log(df$Close)))
df$Return[df$Period=="Weekly"]  <- df$Return[df$Period=="Weekly"] * 4.84 # adjust weekly data to daily volatility (4.84=252/52). Not sure if correct and/or necessary
df$Volatility <- calculate_volatility(df$Return)
df$Period <- NULL
fx <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(FX)
if(fx == "EUR") {
df$FX <- 1
} else {
df$FX <- dplyr::filter(FX_rates, FX == fx) %>% pull(Rate)
}
df$Weight <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Weight)
df$Product <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Product)
df$ContractSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(ContractSize)
df$PositionMin <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(PositionMin)
df$PositionTick <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(PositionTick)
df$Spread <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Spread)
df$Commission <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Commission)
df$CostPerTrade <- (df$Spread / 2 + df$Commission)
# Relative volatility (strategy 13, it does not seems to add much)
{
# df$M <- 1
# df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
# df$RV <- df$Volatility / runMean(df$Volatility, 252)
# df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
# df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Trend-following (strategy 9)
df$multiple_EMA <- multiple_EMA(df$Close, df$Close, df$Volatility)
df$multiple_DC <- multiple_DC(df$Close, df$Close, df$Volatility)
df$multiple_KF <- multiple_KF(df$Close, df$Close, df$Volatility)
df$multiple_TII <- multiple_TII(df$Close, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$multiple_EMA, df$multiple_DC, df$multiple_KF, df$multiple_TII), na.rm=T)
df$ForecastTrend <- cap_forecast(df$ForecastTrend * FDMtrend)
# Carry
# It is based on cash contract interest rate, we remove the 3% commission, so low volatility assets like
# bonds are not negatively affected in this analysis. Of course low volatility assets must be played on the future contract
# if you want to obtain the carry, as interest rates of the cash are always negative (because of the 3% commission that
# is higher than the volatility itself). For high volatility assets you can choose between cash or future.
hc_max <- which.max(hc)
hc_commission <- case_when(
df$Product[1] == "Cash" ~ 0,
df$Product[1] == "Index" ~ 0.03,
df$Product[1] == "Future" ~ 0.03,
TRUE ~ NA_real_)
hc_value <- (hc[hc_max]+hc_commission)
# When carry is always against us (both long and short charge us), we assume it is zero
if(hc_value < 0)
hc_value <- 0
df$ForecastCarry <- ifelse(hc_max == 1, 1, -1) * hc_value / df$Volatility * 10
df$ForecastCarry <- cap_forecast(df$ForecastCarry * FDMcarry)
# Skewness (strategy 24)
df$ForecastSkew <- multiple_Skew(df$Return)
df$ForecastSkew <- cap_forecast(df$ForecastSkew * FDMskew)
# Final trade
df$Forecast <- (
strategy_weights$Trend * df$ForecastTrend +
strategy_weights$Carry * df$ForecastCarry +
strategy_weights$Skew  * df$ForecastSkew   ) * FDM
df$Forecast <- cap_forecast(df$Forecast)
df$InstCapital <- capital * df$Weight * IDM
df$Exposure <- df$InstCapital * target_vol/df$Volatility
df$PositionOptimal <-  (df$Exposure * df$FX * df$Forecast/10) /
(df$ContractSize * df$Close)
df$PositionMax <- (df$Exposure * df$FX * 20/10) /
(df$ContractSize * df$Close)
df$Buffer <- (df$Exposure * df$FX * position_buffering_level/10) / (df$ContractSize * df$Close)
df$Buffer <-  ifelse(df$Buffer < df$PositionMin, df$PositionMin, df$Buffer)
all[[symbol]] <- df
if(!dry_run)
write_csv(df, paste0(current_dir, "/", symbol, ".csv"))
# Be careful, now it is reverse-date sorted, you cannot run any other function like EMA etc..
df <- arrange(df, desc(Date))
results[[symbol]] <- df[1,]
}
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))]
colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
FDMcarry
all$ca %>% View
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))]
excesses %>% head
colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM*0  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))];colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
FDMcarry <- 5
# iterate over data and calculate positions
print("Calculate new positions...")
all <- list()
results <- list()
for(symbol in names(instruments_data)) {
cat(paste(symbol, ""))
df <- instruments_data[[symbol]][[1]]
hc <- instruments_data[[symbol]][[2]]
df$Symbol <- symbol
df$ForecastTrend <- df$ForecastCarry <- df$ForecastSkew <- df$Forecast <- df$PositionMax <- df$PositionOptimal <- df$PositionOptimized <- df$AdjFactor  <- df$RequiredTrade <- df$Buffer <- df$Trading <- df$PositionPrevious <- df$PositionUnrounded <- df$Position <- df$PositionChange <- df$PositionRisk  <- 0
df$Return <- c(0, diff(log(df$Close)))
df$Return[df$Period=="Weekly"]  <- df$Return[df$Period=="Weekly"] * 4.84 # adjust weekly data to daily volatility (4.84=252/52). Not sure if correct and/or necessary
df$Volatility <- calculate_volatility(df$Return)
df$Period <- NULL
fx <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(FX)
if(fx == "EUR") {
df$FX <- 1
} else {
df$FX <- dplyr::filter(FX_rates, FX == fx) %>% pull(Rate)
}
df$Weight <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Weight)
df$Product <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Product)
df$ContractSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(ContractSize)
df$PositionMin <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(PositionMin)
df$PositionTick <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(PositionTick)
df$Spread <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Spread)
df$Commission <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Commission)
df$CostPerTrade <- (df$Spread / 2 + df$Commission)
# Relative volatility (strategy 13, it does not seems to add much)
{
# df$M <- 1
# df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
# df$RV <- df$Volatility / runMean(df$Volatility, 252)
# df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
# df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Trend-following (strategy 9)
df$multiple_EMA <- multiple_EMA(df$Close, df$Close, df$Volatility)
df$multiple_DC <- multiple_DC(df$Close, df$Close, df$Volatility)
df$multiple_KF <- multiple_KF(df$Close, df$Close, df$Volatility)
df$multiple_TII <- multiple_TII(df$Close, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$multiple_EMA, df$multiple_DC, df$multiple_KF, df$multiple_TII), na.rm=T)
df$ForecastTrend <- cap_forecast(df$ForecastTrend * FDMtrend)
# Carry
# It is based on cash contract interest rate, we remove the 3% commission, so low volatility assets like
# bonds are not negatively affected in this analysis. Of course low volatility assets must be played on the future contract
# if you want to obtain the carry, as interest rates of the cash are always negative (because of the 3% commission that
# is higher than the volatility itself). For high volatility assets you can choose between cash or future.
hc_max <- which.max(hc)
hc_commission <- case_when(
df$Product[1] == "Cash" ~ 0,
df$Product[1] == "Index" ~ 0.03,
df$Product[1] == "Future" ~ 0.03,
TRUE ~ NA_real_)
hc_value <- (hc[hc_max]+hc_commission)
# When carry is always against us (both long and short charge us), we assume it is zero
if(hc_value < 0)
hc_value <- 0
df$ForecastCarry <- ifelse(hc_max == 1, 1, -1) * hc_value / df$Volatility * 10
df$ForecastCarry <- cap_forecast(df$ForecastCarry * FDMcarry)
# Skewness (strategy 24)
df$ForecastSkew <- multiple_Skew(df$Return)
df$ForecastSkew <- cap_forecast(df$ForecastSkew * FDMskew)
# Final trade
df$Forecast <- (
strategy_weights$Trend * df$ForecastTrend +
strategy_weights$Carry * df$ForecastCarry +
strategy_weights$Skew  * df$ForecastSkew   ) * FDM
df$Forecast <- cap_forecast(df$Forecast)
df$InstCapital <- capital * df$Weight * IDM
df$Exposure <- df$InstCapital * target_vol/df$Volatility
df$PositionOptimal <-  (df$Exposure * df$FX * df$Forecast/10) /
(df$ContractSize * df$Close)
df$PositionMax <- (df$Exposure * df$FX * 20/10) /
(df$ContractSize * df$Close)
df$Buffer <- (df$Exposure * df$FX * position_buffering_level/10) / (df$ContractSize * df$Close)
df$Buffer <-  ifelse(df$Buffer < df$PositionMin, df$PositionMin, df$Buffer)
all[[symbol]] <- df
if(!dry_run)
write_csv(df, paste0(current_dir, "/", symbol, ".csv"))
# Be careful, now it is reverse-date sorted, you cannot run any other function like EMA etc..
df <- arrange(df, desc(Date))
results[[symbol]] <- df[1,]
}
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM*0  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))];colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
> df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
>
>     res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
> df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
>
>     res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * Forecast/10) * Return * IDM  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))];colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * ForecastTrend/10) * Return * IDM  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))];colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * ForecastSkew/10) * Return * IDM  )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))];colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1])* portfolio_weights, dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
excesses[,-1] %>% na.omit %>% cor
graphics.off()
excesses[,-1] %>% na.omit %>% cor %>% corrplot::corrplot()
excesses %>% dim
today_trading
all$ca$Trading
lapply(all, function(df) mutate(df, Excess= lag(target_vol / Volatility * ForecastTrend/10) * Return * IDM * Weight )) ->all
df <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), all) %>% arrange(Date)
excesses <- df[,grep("^Date|^Excess", colnames(df))];colnames(excesses) <- c("Date", names(all))
res <- portfolio_summary(as.matrix(excesses[,-1]), dates = excesses$Date, plot_stats = TRUE, symbol_wise = TRUE  )
# Final Backtest
{
# A subset of instrument I might actually trade
CMC_selection_ <- c("ZN","G","GG","CC","CA","KC","RM","HG","ZC","CT","CL","RB","HO", "LF", "PL","PA",
"SI", "GC","HE","GF", "LE","LS","NG","ZO", "OJ","ZR","ZS","ZL","ZR","ZC","SW","ZM",
"ES","ZW","HS","NY","LX")
CMC_selection <- c("ZN","CA","RM","HG","CT","CL","GC","HE","LE","LS","NG","OJ","ZR","ZS","SW","ES","ZW","HS")
Assets_all <- BackAdj
Assets <- BackAdj[CMC_selection] # or BackAdj[CMC_selection]
results <- list()
forecasts <- list()
exposures <- list()
returns <- list()
vols <- list()
strategies <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
FDMcsm <- 1.4
FDMskew <- 1.18
FDM <- 1.5
starting_year <- 2021
# Apply relative volatility
relative_vol <- FALSE
# Apply Marker Correlation
market_cor <- FALSE
# Symbol-wise results
symbol_wise <- TRUE
# Strategies weights
weights <- list("Long"=0, "Trend"=1, "Carry"=0, "Skew"=0, "CSM"=0,"Test"=0)
if(sum(unlist(weights)) != 1)
stop("Strategy weights do not sum to zero")
# Asset class indices
if(weights[["CSM"]] > 0) {
NPs <- list()
for(n in names(Assets_all)) {
df <- Assets_all[[n]]
df$Volatility = calculate_volatility(df$Return)
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$dNP = c(0, diff(df$NP))
NPs[[n]] <- select(df, Date, Symbol, Class, NP, dNP)
}
allNPs <- do.call(rbind, NPs)
Asset_class_indices <- group_by(allNPs, Class, Date) %>% summarise(Symbol=Symbol, R=mean(dNP)) %>%
arrange(Class, Date) %>% select(-Symbol)  %>%  unique %>% group_by( Class) %>% mutate(A=cumsum(R)) %>% ungroup()
}
# iterate over symbols
for(symbol in names(Assets)) {
cat(paste(symbol, ""))
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = target_vol / df$Volatility
df$Return[is.na(df$Return)] <- 0
df$ForecastLong <- df$ForecastTrend <- df$ForecastCarry <- df$ForecastCSM <- df$ForecastSkew <- df$ForecastTest <- 0
# Relative volatility (strategy 13, improvement is minimal, and we only apply it to trend)
df$M <- 1
if(relative_vol) {
df$RV <- relative_volatility(df$Volatility)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Correlation with market
df$Cor <- 1
if(market_cor) {
df <- merge(df, select(BackAdj$ES, Date, Return) %>% mutate(ES=Return) %>% select(-Return), by="Date")
df$Cor <- multiple_cor(df$Return %>% na.locf(na.rm=F), df$ES %>% na.locf(na.rm=F))
df$Cor <- -df$Cor * 0.75 + 1.25
}
# Long-only
if(weights[["Long"]]  > 0) {
df$ForecastLong <- runif(n = nrow(df), 5, 15)
}
# Trend-following (strategy 9)
if(weights[["Trend"]]  > 0) {
df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastEMA, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M * df$Cor
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
}
# Carry (strategy 10)
if(weights[["Carry"]]  > 0) {
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
}
# Cross-sectional momentum (strategy 19)
if(weights[["CSM"]]  > 0) {
df <- merge(df, filter(Asset_class_indices, Class==df$Class[1]) %>%  select(Date, A), by="Date") # Asset_class_indices obtained from before
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$ForecastCSM <- cross_sectional_momentum(df$NP, df$A) * FDMcsm
df$ForecastCSM <- cap_forecast(df$ForecastCSM)
}
# Skewness (strategy 24)
if(weights[["Skew"]]  > 0) {
df$ForecastSkew <- returns_skew(df$Return) * FDMskew
df$ForecastSkew <- cap_forecast(df$ForecastSkew)
}
if(weights[["Test"]]  > 0) {
}
{  # Tests
# # Kurtosis
# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   forecast <- rollapply(df$Return, width=20, kurt,  fill=NA, align="right")
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# Acceleration
if(weights[["Test"]]  > 0) {
df$Forecast16 <- (EMA(df$AdjClose, 16) -  EMA(df$AdjClose, 64)) / (df$Close * df$Volatility / 16) * 4.1
df$Forecast32 <- (EMA(df$AdjClose, 32) -  EMA(df$AdjClose, 128)) / (df$Close * df$Volatility / 16) * 2.79
df$Forecast64 <- (EMA(df$AdjClose, 64) -  EMA(df$AdjClose, 256)) / (df$Close * df$Volatility / 16) * 1.91
df$Forecast128 <- (EMA(df$AdjClose, 128) -  EMA(df$AdjClose, 512)) / (df$Close * df$Volatility / 16) * 1.50
df$Acc16 <- c(rep(NA, 16), diff(df$Forecast16, 16)) * 1.90
df$Acc32 <- c(rep(NA, 32), diff(df$Forecast32, 32)) * 1.98
df$Acc64 <- c(rep(NA, 64), diff(df$Forecast64, 64)) * 2.05
df$Acc128 <- c(rep(NA, 128), diff(df$Forecast128, 128)) * 2.10
df$ForecastTest <- cap_forecast(rowMeans(cbind(df$Acc16 , df$Acc32 , df$Acc64, df$Acc128)) * 1.55)
}
# COT
# COT <- read_csv("/home/marco/trading/Systems/Monopoly/COT.csv")
# select(COT, c("Market and Exchange Names", "As of Date in Form YYYY-MM-DD", "Noncommercial Positions-Long (All)","Noncommercial Positions-Short (All)", "Commercial Positions-Long (All)","Commercial Positions-Short (All)")) -> a
# colnames(a) <- c("Name", "Date", "NC_long", "NC_short", "C_long", "C_short")
# mutate(a, NC=NC_long/(NC_long+NC_short),C=C_long/(C_long+C_short) ) -> COT
# if(weights[["Test"]]  > 0) {
#     df$COT <- to_load[to_load$Symbol==symbol,]$COT %>% gsub('\"', '', .)
#     if(is.na(df$COT[1]) | symbol =="CL"| symbol =="KO"| symbol =="TG") {
#         df$ForecastTest <- 0
#
#     } else {
#     cot <- filter(COT, Name==df$COT[1])  %>%  select(Date, C)
#     df_ <- df
#     df_ <- merge(df_, cot, by="Date", all = TRUE, incomparables = NA)
#     df <- arrange(df_, Date) %>% mutate(C = na.locf(C, na.rm=F))
#     df$C <- lag(df$C );
#     r <- c(0,diff(log(df$C))); r[r==0] <- NA; r = na.locf(r, na.rm=F)
#     f <- AbsoluteStrength(df$C, 20) /  calculate_volatility(r) * 28
#     f <- multiple_AS(df$C, df$C, calculate_volatility(r))
#     forecast <- f
#     df$ForecastTest <- (forecast)
#     }
# }
}
# Final trade
df$Forecast <- ( weights[["Long"]] * df$ForecastLong +
weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest)
df$Forecast <- cap_forecast(df$Forecast * FDM)
df$Excess <- lag(df$Position * df$Forecast/10) * df$Return * IDM
df <- filter(df, year(Date) >= starting_year)
forecasts[[symbol]]  <-   select(df, Date, Forecast)
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
vols[[symbol]]  <-  select(df, Date, Volatility)
results[[symbol]] <- select(df, Date, Excess)
strategies[[symbol]]  <-  dplyr::select(df, Date, ForecastLong, ForecastTrend, ForecastCarry, ForecastCSM,ForecastSkew, ForecastTest)
} # end of symbol sloop
print("")
portfolio <- merge_portfolio_list(results)
portfolio_weights <- 1 / length(names(Assets)) # equal weights per instrument
res <- portfolio_summary(as.matrix(portfolio[,-1]) * portfolio_weights, dates = portfolio$Date, plot_stats = TRUE, symbol_wise = symbol_wise  )
print(res$Aggregate %>% unlist)
all_forecasts <- do.call(rbind,forecasts)[,2] %>% na.omit
avg_forecast_turnover <- round(252 * mean(abs(diff(all_forecasts/10))), 2)
avg_trade_turnover <- round(length(rle(all_forecasts>0)$length) / (length(all_forecasts)/252), 2)
print(paste("Average Forecast Turnover:", avg_forecast_turnover))
print(paste("Average Trade Turnover:", avg_trade_turnover))
if(symbol_wise) {
res$Symbols$Class <- lapply(Assets[names(results)], function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`, na.rm=T), SR_sd=sd(`Sharpe ratio`, na.rm=T))
}
{
## Some figures takes from the Risk Management section
# Figure 97: Portfolio volatility, check it is in line with target volatility
# full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
# full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
# full_df_vols<- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), vols) %>% arrange(Date)
# a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
# plot.ts(a*100); abline(h=target_vol*100)
# a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
}
