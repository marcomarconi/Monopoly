df$ForecastTrend %>% plot.ts
df$ForecastTrend %>% abs %>% na.omit %>% mean
df <- data.frame(AdjClose=rw, Close=rw, Risk=calculate_risk(c(0,diff(log(rw)))))
df$Position = lag(target_vol / df$Risk)
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Risk)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Risk)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Risk)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Risk)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Risk)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Risk)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend
df$ForecastTrend %>% abs %>% na.omit %>% mean
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII))
df$ForecastTrend %>% abs %>% na.omit %>% mean
10/7.482935
target_vol
# execute
{
Assets <- BackAdj
results <- list()
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(0.5, 0.5)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Risk = calculate_risk(df$Return)
df$Position = lag(target_vol / df$Risk)
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Risk)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Risk)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Risk)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Risk)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Risk)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Risk)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Risk)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
df$ForecastTrend %>% abs %>% na.omit %>% mean
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Risk)
df$ForecastCarry %>% abs %>% na.omit %>% mean
BackAdj$AL <- NULL
write_rds(BackAdj, file = "/home/marco/trading/Historical Data/Barchart/BackAdj.RDS")
# execute
{
Assets <- BackAdj
results <- list()
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(0.5, 0.5)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Risk = calculate_risk(df$Return)
df$Position = lag(target_vol / df$Risk)
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Risk)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Risk)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Risk)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Risk)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Risk)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Risk)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Risk)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
BackAdj %>% names
BackAdj %>% length
# Execution
{
Assets <- BackAdj
results <- list()
IDM = 3
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(0.5, 0.5)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Risk = calculate_risk(df$Return)
df$Position = lag(target_vol / df$Risk)
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Risk)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Risk)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Risk)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Risk)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Risk)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Risk)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Risk)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(0.5, 0.5)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Risk = calculate_risk(df$Return)
df$Position = lag(target_vol / df$Risk)
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Risk)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Risk)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Risk)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Risk)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Risk)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Risk)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Risk)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Figure 54
df <- BackAdj[["ES"]]
df$Risk = calculate_risk(df$Return)
df$RV <- df$Risk / runMean(df$Risk, 256)
plot(df$Date, df$RV)
# Figure 55
RVs <- list()
for(n in names(BackAdj)) {
df <- BackAdj[[n]]
df$Risk = calculate_risk(df$Return)
RVs[[n]] <- df$Risk / runMean(df$Risk, 256)
}
RVs %>% unlist %>% hist(xlim = c(0,5), 100)
calculate_volatility <- function(returns, long_span=252, short_span=35,  weights=c(0.3, 0.7), period=252){
vol_short <- sqrt(EMA(replace(returns, is.na(returns), 0)^2, short_span))
vol_long <- runMean(vol_short, long_span)
vol <-  (weights[1] * vol_long + weights[2] * vol_short) * sqrt(period) # one year instead of ten
return(vol)
}
?runMean
runMean(1:10, 3)
runMean(1:10, 3, cumulative = TRUE)
runMean(1:10, 4, cumulative = TRUE)
runMean
?runSum
runSum
matplot2(cbind(runMean(df$Risk))
matplot2(cbind(runMean(df$Risk, 252), runMean(df$Risk, 2520)))
matplot2(cbind(df$Risk, runMean(df$Risk, 252), runMean(df$Risk, 2520)))
?Reduce
rv <- runMean(volatility, period)
rv <- runMean(volatility, 30)
rv <- runMean(df$Risk, 30)
rv
first
x <- 1:100; Map(1:(period-1), function(i) mean(x[1:i]))
x <- 1:100; Map(1:(10-1), function(i) mean(x[1:i]))
x <- 1:100; Map(function(i) mean(x[1:i]), 1:(10-1))
x <- 1:100; Map(function(i) mean(x[1:i]), 1:(10-1)) %>% unlist
period=2520
volatility <- df$Risk
rv_2 <- runMean(volatility, period)
rv_1 <- unlist(Map(function(i) mean(x[1:i]), 1:(period-1)))
c(rv_1, rv_2) %>% length
volatility %>% length
rv_2 <- runMean(volatility, period)[period:length(volatility)]
rv_1 <- unlist(Map(function(i) mean(x[1:i]), 1:(period-1)))
c(rv_1, rv_2) %>% length
relative_volatility <- function(volatility, period=2520) {
rv_2 <- runMean(volatility, period)[period:length(volatility)]
rv_1 <- unlist(Map(function(i) mean(x[1:i]), 1:(period-1)))
return(c(rv_1, rv_2))
}
matplot2(cbind(relative_volatility(df$Risk, 2520), runMean(df$Risk, 252), runMean(df$Risk, 2520)))
relative_volatility(df$Risk, 2520)
relative_volatility(df$Risk, 2520) %>% view
relative_volatility <- function(volatility, period=2520) {
rv_2 <- runMean(volatility, period)[period:length(volatility)]
rv_1 <- unlist(Map(function(i) mean(volatility[1:i]), 1:(period-1)))
return(c(rv_1, rv_2))
}
matplot2(cbind(relative_volatility(df$Risk, 2520), runMean(df$Risk, 252), runMean(df$Risk, 2520)))
matplot2(cbind(relative_volatility(df$Risk, 2520)))
rv_2 <- runMean(volatility, period)[period:length(volatility)]
rv_1 <- unlist(Map(function(i) mean(volatility[1:i]), 1:(period-1)))
c(rv_1, rv_2)
rv_1
1:(period-1)
rv_1 <- unlist(Map(function(i) mean(volatility[1:i]), 1:(10-1)))
rv_1
relative_volatility <- function(volatility, period=2520) {
rv_2 <- runMean(volatility, period)[period:length(volatility)]
rv_1 <- unlist(Map(function(i) mean(volatility[1:i], na.rm=TRUE), 1:(period-1)))
return(c(rv_1, rv_2))
}
matplot2(cbind(relative_volatility(df$Risk, 2520), runMean(df$Risk, 252), runMean(df$Risk, 2520)))
matplot2(cbind(relative_volatility(df$Risk, 2520)))
relative_volatility(df$Risk, 2520)
relative_volatility(df$Risk, 2520) %>% view
symbol
symbol <- "ES"
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
matplot2(cbind(relative_volatility(df$Volatility, 2520), runMean(df$Volatility, 252), runMean(df$Volatility, 2520)))
data.frame(relative_volatility(df$Volatility, 2520)) %>% View
2804-2520
period
relative_volatility <- function(volatility, period=2520) {
return(Map(function(i) mean(tail(volatility[1:i], period), na.rm=TRUE), 1:length(volatility)))
}
matplot2(cbind(relative_volatility(df$Volatility, 2520), runMean(df$Volatility, 252), runMean(df$Volatility, 2520)))
matplot2(cbind( runMean(df$Volatility, 252), runMean(df$Volatility, 2520)))
matplot2(cbind(relative_volatility(df$Volatility, 2520), runMean(df$Volatility, 252), runMean(df$Volatility, 2520)))
symbol <- "ZW"
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
matplot2(cbind(relative_volatility(df$Volatility, 2520), runMean(df$Volatility, 252), runMean(df$Volatility, 2520)))
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(0.5, 0.5)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
df$RV <- relative_volatility(df$Volatility)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# Trend-following
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
# Carry
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
# Final trade
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Relative volatility
df$RV <- relative_volatility(df$Volatility)
df$RV
relative_volatility <- function(volatility, period=2520) {
return(unlist(Map(function(i) mean(tail(volatility[1:i], period), na.rm=TRUE), 1:length(volatility))))
}
relative_volatility <- function(volatility, period=2520) {
return(unlist(Map(function(i) mean(tail(volatility[1:i], period), na.rm=TRUE), 1:length(volatility))))
}
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(0.5, 0.5)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# Trend-following
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
# Carry
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
# Final trade
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(1, 0)
for(symbol in names(Assets)) {
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# Trend-following
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
# Carry
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
# Final trade
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(1, 0)
for(symbol in names(Assets)) {
print(symbol)
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# Trend-following
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
# Carry
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
# Final trade
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(1, 0)
for(symbol in names(Assets)) {
print(symbol)
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
#df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
df$RV <- df$Volatility / runMean(df$Volatility, 252))
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(1, 0)
for(symbol in names(Assets)) {
print(symbol)
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
#df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
df$RV <- df$Volatility / runMean(df$Volatility, 252)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
# Trend-following
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
# Carry
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
# Final trade
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
# Execution
{
Assets <- BackAdj
results <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
weights <- c(1, 0)
for(symbol in names(Assets)) {
print(symbol)
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
# Relative volatility
#df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
# df$RV <- df$Volatility / runMean(df$Volatility, 252)
# df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
# df$M <- EMA(2 - 1.5 * df$Q, 10)
# Trend-following
#df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastAS <- multiple_AS(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
#df$ForecastRSI <- multiple_RSI(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastAS, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * 1#df$M
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
# Carry
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
# Final trade
df$Trade <- (weights[1] * df$ForecastTrend + weights[2] * df$ForecastCarry) / 10
df$Trade <- lag(df$Trade)
df$Excess <- df$Return * df$Position * df$Trade * IDM
results[[symbol]] <- select(df, Date, Excess)
}
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE, benchmark.dates = benchmark.dates  , benchmark.returns = benchmark.returns  )
print(res$Aggregate %>% unlist)
}
