# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# Acceleration
# if(weights[["Test"]]  > 0) {
#   df$Forecast16 <- (EMA(df$AdjClose, 16) -  EMA(df$AdjClose, 64)) / (df$Close * df$Volatility / 16) * 4.1
#   df$Forecast32 <- (EMA(df$AdjClose, 32) -  EMA(df$AdjClose, 128)) / (df$Close * df$Volatility / 16) * 2.79
#   df$Forecast64 <- (EMA(df$AdjClose, 64) -  EMA(df$AdjClose, 256)) / (df$Close * df$Volatility / 16) * 1.91
#   df$Forecast128 <- (EMA(df$AdjClose, 128) -  EMA(df$AdjClose, 512)) / (df$Close * df$Volatility / 16) * 1.50
#   df$Acc16 <- c(rep(NA, 16), diff(df$Forecast16, 16)) * 1.90
#   df$Acc32 <- c(rep(NA, 32), diff(df$Forecast32, 32)) * 1.98
#   df$Acc64 <- c(rep(NA, 64), diff(df$Forecast64, 64)) * 2.05
#   df$Acc128 <- c(rep(NA, 128), diff(df$Forecast128, 128)) * 2.10
#   df$ForecastTest <- cap_forecast(rowMeans(cbind(df$Acc16 , df$Acc32 , df$Acc64, df$Acc128)) * 1.55)
# }
# Final trade
df$Forecast <- (  weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest) / 10
df$Forecast <- lag(df$Forecast)
df$Excess <- df$Return * df$Position * df$Forecast * IDM
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
results[[symbol]] <- select(df, Date, Excess)
}
print("")
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = FALSE  )
print(res$Aggregate %>% unlist)
res$Symbols$Class <- lapply(Assets, function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`), SR_sd=sd(`Sharpe ratio`))
}
full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
?runCov
full_df_returns %>% tail
colnames(full_df_exposures) <- c("Date", names(exposures))
colnames(full_df_returns) <- c("Date", names(exposures))
full_df_returns %>% tail
apply(full_df_returns, function(x) cov(x, use="pairwise.complete.obs"))
apply(full_df_returns, 1, function(x) cov(x, use="pairwise.complete.obs"))
apply(full_df_returns[,-1], 1, function(x) cov(x, use="pairwise.complete.obs"))
sapply(181:nrow(full_df_returns),  function(i)  sd(sqrt(full_df_exposures[i,] %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% full_df_exposures[i,]))
sapply(181:nrow(full_df_returns),  function(i)  sd(sqrt(full_df_exposures[i,] %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% full_df_exposures[i,])))
i <- 181
full_df_returns[(i-180):i,-1]
cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
full_df_exposures[i,] %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
full_df_exposures[i,]
full_df_exposures[i,-1] %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
full_df_exposures[i,-1]
full_df_exposures[i,-1] %>% class
as.vector(full_df_exposures[i,-1]) %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
as.vector(full_df_exposures[i,-1])
as.vector(full_df_exposures[i,-1]) %>% class
as.numeric(full_df_exposures[i,-1]) %>% class
as.numeric(full_df_exposures[i,-1])
as.numeric(full_df_exposures[i,-1]) %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
as.numeric(full_df_exposures[i,-1]) %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% as.numeric(full_df_exposures[i,-1])
sapply(181:nrow(full_df_returns),  function(i)  sd(sqrt( as.numeric(full_df_exposures[i,-1]) %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% as.numeric(full_df_exposures[i,-1])  ) ) )
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) ) -> a
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w   ) ) -> a
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) ) -> a
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) } ) -> a
a
a %>% plot
a %>% plot.ts
tail(a)
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) } )asas
i
i <- nrow(full_df_returns)
w <- as.numeric(full_df_exposures[i,-1]);
q
w
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) } )asas
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) } ) -> a
plot(a)
a
w
i
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) ) } )a -> a
w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0;
w
cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w
sd(sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  ) )
sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  )
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  )  } )a -> a
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  )  } ) -> a
plot(a)
i <- 3000
w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0;
w
sqrt( w %*% cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs") %*% w  )
cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs")
full_df_returns[(i-180):i,-1]
S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0
sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } ) -> a
plot(a)
plot.ts(a*100)
abline(h=target_vol)
abline(h=target_vol*100)
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close / FX / capital)
w
portfolio_volatility <- sqrt(w %% cov_matrix %*% w)
cov_matrix
w
sqrt(w %% cov_matrix %*% w)
w
w %% cov_matrix
w %% cov_matrix %*% w
w %% cov_matrix %*% t(w)
t(w) %% cov_matrix %*% w
w %% cov_matrix %*% w
w %*% cov_matrix %*% w
portfolio_volatility <- sqrt(w %*% cov_matrix %*% t(w))
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility))
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close * FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility), "%")
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close * FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility), "%")
w
portfolio_volatility
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close / FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility), "%")
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close / FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility), "%")
print(paste("Active positions:", sum(today_trading$Position != 0), "total symbols:", nrow(today_trading)))
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close / FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility), "%")
portfolio_volatility
print(paste("Portfolio volatility:", portfolio_volatility, "%"))
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close * FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility, "%"))
# Portfolio volatility
w <- with(today_trading, PositionPrevious * ContractSize * Close / FX / capital) %>% as.numeric
portfolio_volatility <- round(sqrt(w %*% cov_matrix %*% w) * 100, 2)
print(paste("Portfolio volatility:", portfolio_volatility, "%"))
View(today_trading)
df
df$Volatility %>% hist
df$Volatility %>% quantile(probs=c(0.99))
results <- list()
for(symbol in names(instruments_data)) {
print(symbol)
df <- instruments_data[[symbol]][[1]]
hc <- instruments_data[[symbol]][[2]]
df$Symbol <- symbol
df$ForecastTrend <- df$ForecastCarry <- df$ForecastSkew <- df$Forecast <- df$PositionMax <- df$PositionOptimal <- df$PositionOptimized <- df$AdjFactor  <- df$RequiredTrade <- df$Buffer <- df$Trading <- df$PositionPrevious <- df$PositionUnrounded <- df$Position <- df$PositionRisk  <- 0
df$Return <- c(0, diff(log(df$Close)))
df$Volatility = calculate_volatility(df$Return)
fx <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(FX)
if(fx == "EUR") {
df$FX <- 1
} else {
df$FX <- dplyr::filter(FX_rates, FX == fx) %>% pull(Rate)
}
df$Weight <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Weight)
df$Product <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Product)
df$ContractSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(ContractSize)
df$MinPosition <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(MinPosition)
df$TickSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(TickSize)
df$Decimals <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Decimals)
df$Spread <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Spread)
df$Commission <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Commission)
df$CostPerTrade <- (df$Spread / 2 + df$Commission)
# Relative volatility (strategy 13, it does not seems to add much)
{
# df$M <- 1
# df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
# df$RV <- df$Volatility / runMean(df$Volatility, 252)
# df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
# df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Trend-following (strategy 9)
df$ForecastTrend <- rowMeans(do.call(cbind, lapply(list(multiple_EMA, multiple_DC, multiple_KF, multiple_TII), function(f) f(df$Close, df$Close, df$Volatility))))
df$ForecastTrend <- cap_forecast(df$ForecastTrend * FDMtrend)
# Carry
# It is based on cash contract interest rate, we remove the 3% commission, so low volatility assets like
# bonds are not negatively affected in this analysis. Of course low volatility assets must be played on the future contract
# if you want to obtain the carry, as interest rates of the cash are always negative (because of the 3% commission that
# is higher than the volatility itself). For high volatility assets you can choose between cash or future.
hc_max <- which.max(hc)
hc_commission <- case_when(
df$Product[1] == "Cash" ~ 0,
df$Product[1] == "Index" ~ 0.03,
df$Product[1] == "Future" ~ 0.03,
TRUE ~ NA_real_)
hc_value <- (hc[hc_max]+hc_commission)
if(hc_value < 0)
hc_value <- 0
df$ForecastCarry <- ifelse(hc_max == 1, 1, -1) * hc_value / df$Volatility * 10
df$ForecastCarry <- cap_forecast(df$ForecastCarry * FDMcarry)
# Skewness (strategy 24)
df$ForecastSkew <- returns_skew(df$Return)
df$ForecastSkew <- cap_forecast(df$ForecastSkew * FDMskew)
# Final trade
df$Forecast <- (
strategy_weights$Trend * df$ForecastTrend +
strategy_weights$Carry * df$ForecastCarry +
strategy_weights$Skew  * df$ForecastSkew   )
df$Forecast <- cap_forecast(df$Forecast)
df$InstCapital <- capital * df$Weight * IDM
df$Exposure <- df$InstCapital * target_vol/df$Volatility
df$PositionOptimal <-  (df$Exposure * df$FX * df$Forecast/10) /
(df$ContractSize * df$Close  )
df$PositionMax <- (df$Exposure * df$FX * 2) /
(df$ContractSize * df$Close  )
# Be careful, now it is reverse-date sorted, you cannot run any other function like EMA etc..
df <- arrange(df, desc(Date))
#write_csv(df, paste0(logs_instruments_dir, "/", symbol, ".csv"))
results[[symbol]] <- df[1,]
}
lapply(results, function(x) quantile(x, probs=0.99))
lapply(results, function(x) quantile(x$Volatility, probs=0.99))
lapply(results, function(x) quantile(x$Volatility, probs=0.99), simplify=T)
lapply(results, function(x) quantile(x$Volatility, probs=0.99), simplified=T)
lapply(results, function(x) quantile(x$Volatility, probs=0.99)) %>% unlist
# Portfolio jump risk
jump <- lapply(results, function(x) quantile(x$Volatility, probs=0.99)) %>% unlist
jump_cor_matrix <- diag(jump) %*% cor_matrix %*% diag(jump)
jump_cor_matrix
# Portfolio jump risk
jump <- lapply(results, function(x) quantile(x$Volatility, probs=0.99)) %>% unlist
jump_cov_matrix <- diag(jump) %*% cor_matrix %*% diag(jump)
jump_risk <- round(sqrt(w %*% jump_cor_matrix %*% w) * 100, 2)
jump_risk
print(paste("Portfolio jump risk:", jump_risk, "%"))
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(x$Volatility, 1))) %>% unlist
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(x$Volatility, 1)) %>% unlist
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1)) %>% unlist
risks
correlation_shock_portfolio <- sum(abs(risks))
correlation_shock_portfolio
print(paste("Portfolio corrlation risk:", correlation_shock_portfolio, "%"))
correlation_shock_portfolio <- rouns(sum(abs(risks)), 2)
correlation_shock_portfolio <- rouns(sum(abs(risks)), 2) * 100
print(paste("Portfolio corrlation risk:", correlation_shock_portfolio, "%"))
correlation_shock_portfolio <- round(sum(abs(risks)), 2) * 100
print(paste("Portfolio corrlation risk:", correlation_shock_portfolio, "%"))
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1)) %>% unlist
correlation_shock_portfolio <- round(sum(abs(risks)), 2) * 100
print(paste("Portfolio corrlation risk:", correlation_shock_portfolio, "%"))
# Final Backtest
{
# A subset of instrument I might actually trade
CMC_selection <- c("ZN","GG","CC","KC","HG","ZC","CT","CL","IM","GC","HE","LE","LS","NG","ZO","OJ","ZR","ZS","ES","SB","DX","ZW","D6")
Assets <- BackAdj# or BackAdj[CMC_selection]
results <- list()
exposures <- list()
returns <- list()
vols <- list()
target_vol <- 0.25
IDM = 2.5
FDMtrend <- 1.33
FDMcarry <- 1.05
FDMcsm <- 1.4
FDMskew <- 1.18
FDMkurtosis <- 1.18
# Trend, Carry, CSM, Skew, Kurtosis
weights <- list("Trend"=0.5, "Carry"=0.5, "CSM"=0, "Skew"=0, "Test"=0)
# Apply relative volatility
relative_vol <- FALSE
# Symbol-wise results
symbol_wise <- FALSE
if(sum(unlist(weights)) != 1)
warning("Strategy weights do not sum to zero")
# Asset class indices
if(weights[["CSM"]] > 0) {
NPs <- list()
for(n in names(Assets)) {
df <- Assets[[n]]
df$Volatility = calculate_volatility(df$Return)
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$dNP = c(0, diff(df$NP))
NPs[[n]] <- select(df, Date, Symbol, Class, NP, dNP)
}
allNPs <- do.call(rbind, NPs)
Asset_class_indices <- group_by(allNPs, Class, Date) %>% summarise(Symbol=Symbol, R=mean(dNP)) %>%
arrange(Class, Date) %>% select(-Symbol)  %>%  unique %>% group_by( Class) %>% mutate(A=cumsum(R)) %>% ungroup()
}
# iterate over symbols
for(symbol in names(Assets)) {
cat(paste(symbol, ""))
df <- Assets[[symbol]]
df$Volatility = calculate_volatility(df$Return)
df$Position = lag(target_vol / df$Volatility)
df$ForecastTrend <- df$ForecastCarry <- df$ForecastCSM <- df$ForecastSkew <- df$ForecastTest <- 0
# Relative volatility (strategy 13, improvement is minimal, and we only apply it to trend)
df$M <- 1
if(relative_vol) {
df$RV <- relative_volatility(df$Volatility)
df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Correlation with market
df <- merge(df, select(BackAdj$ES, Date, AdjClose) %>% mutate(ES=AdjClose) %>% select(-AdjClose), by="Date")
df$Cor <- multiple_cor(df$AdjClose, df$ES)
# Trend-following (strategy 9)
if(weights[["Trend"]]  > 0) {
df$ForecastEMA <- multiple_EMA(df$AdjClose, df$Close, df$Volatility)
df$ForecastDC <- multiple_DC(df$AdjClose, df$Close, df$Volatility)
df$ForecastKF <- multiple_KF(df$AdjClose, df$Close, df$Volatility)
df$ForecastTII <- multiple_TII(df$AdjClose, df$Close, df$Volatility)
df$ForecastTrend <- rowMeans(cbind(df$ForecastEMA, df$ForecastDC, df$ForecastKF, df$ForecastTII)) * FDMtrend * df$M * (-df$Cor+1.0)
df$ForecastTrend <- cap_forecast(df$ForecastTrend)
}
# Carry (strategy 10)
if(weights[["Carry"]]  > 0) {
df$ForecastCarry <- multiple_Carry(df$Basis, df$Basis_distance, df$Volatility)  * FDMcarry  * (-df$Cor+1.0)
df$ForecastCarry <- cap_forecast(df$ForecastCarry)
}
# Cross-sectional momentum (strategy 19)
if(weights[["CSM"]]  > 0) {
df <- merge(df, filter(Asset_class_indices, Class==df$Class[1]) %>%  select(Date, A), by="Date") # Asset_class_indices obtained from before
df$NP <- normalize_price(df$AdjClose, df$Close, df$Volatility)
df$ForecastCSM <- cross_sectional_momentum(df$NP, df$A) * FDMcsm
df$ForecastCSM <- cap_forecast(df$ForecastCSM)
}
# Skewness (strategy 24)
if(weights[["Skew"]]  > 0) {
df$ForecastSkew <- returns_skew(df$Return) * FDMskew  * (-df$Cor+1.0)
df$ForecastSkew <- cap_forecast(df$ForecastSkew)
}
# # Kurtosis
# if(weights[["Test"]]  > 0) {
#   df$ForecastTest <- returns_kurtosis(df$Return) * FDMkurtosis
#   df$ForecastTest <- cap_forecast(df$ForecastTest)
# }
# Acceleration
# if(weights[["Test"]]  > 0) {
#   df$Forecast16 <- (EMA(df$AdjClose, 16) -  EMA(df$AdjClose, 64)) / (df$Close * df$Volatility / 16) * 4.1
#   df$Forecast32 <- (EMA(df$AdjClose, 32) -  EMA(df$AdjClose, 128)) / (df$Close * df$Volatility / 16) * 2.79
#   df$Forecast64 <- (EMA(df$AdjClose, 64) -  EMA(df$AdjClose, 256)) / (df$Close * df$Volatility / 16) * 1.91
#   df$Forecast128 <- (EMA(df$AdjClose, 128) -  EMA(df$AdjClose, 512)) / (df$Close * df$Volatility / 16) * 1.50
#   df$Acc16 <- c(rep(NA, 16), diff(df$Forecast16, 16)) * 1.90
#   df$Acc32 <- c(rep(NA, 32), diff(df$Forecast32, 32)) * 1.98
#   df$Acc64 <- c(rep(NA, 64), diff(df$Forecast64, 64)) * 2.05
#   df$Acc128 <- c(rep(NA, 128), diff(df$Forecast128, 128)) * 2.10
#   df$ForecastTest <- cap_forecast(rowMeans(cbind(df$Acc16 , df$Acc32 , df$Acc64, df$Acc128)) * 1.55)
# }
# Final trade
df$Forecast <- (  weights[["Trend"]] * df$ForecastTrend +
weights[["Carry"]] * df$ForecastCarry +
weights[["CSM"]] * df$ForecastCSM +
weights[["Skew"]] * df$ForecastSkew +
weights[["Test"]] * df$ForecastTest) / 10
df$Forecast <- lag(df$Forecast)
df$Excess <- df$Return * df$Position * df$Forecast * IDM
exposures[[symbol]]  <-  mutate(df, Exposure=Position * Forecast) %>% select(Date, Exposure)
returns[[symbol]]  <-  select(df, Date, Return)
vols[[symbol]]  <-  select(df, Date, Volatility)
results[[symbol]] <- select(df, Date, Excess)
}
print("")
portfolio <- merge_portfolio_list(results)
res <- portfolio_summary(as.matrix(portfolio[,-1]), dates = portfolio$Date, plot_stats = TRUE, symbol_wise = symbol_wise  )
print(res$Aggregate %>% unlist)
if(symbol_wise) {
res$Symbols$Class <- lapply(Assets, function(x) x$Class[1]) %>% unlist
group_by(res$Symbols, Class) %>% summarise(SR_mean=mean(`Sharpe ratio`), SR_sd=sd(`Sharpe ratio`))
}
# Figure 97: Portfolio volatility, check it is in line with target volatility
# a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1]); w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
# plot.ts(a*100); abline(h=target_vol*100)
}
# Figure 97: Portfolio volatility, check it is in line with target volatility
full_df_exposures <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), exposures) %>% arrange(Date)
full_df_returns <- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), returns) %>% arrange(Date)
full_df_vols<- Reduce(function(...) full_join(..., by = "Date", all = TRUE, incomparables = NA), vols) %>% arrange(Date)
full_df_exposures[,-1] * full_df_vols[,-1]
a <- full_df_exposures[,-1] * full_df_vols[,-1]
a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]))
plot.ts(a)
a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
plot.ts(a)
full_df_vols %>% tail
full_df_exposures %>% tail
a <- rowSums(abs(full_df_exposures[,-1]/10 * full_df_vols[,-1]), na.rm=T)
plot.ts(a)
plot.ts(a*100)
tail(full_df_exposures[,-1]/10=
tail(full_df_exposures[,-1]/10)
a <- sapply(181:nrow(full_df_returns),  function(i) { w <- as.numeric(full_df_exposures[i,-1])/10; w[is.na(w)] <- 0; S <-  cov(full_df_returns[(i-180):i,-1], use="pairwise.complete.obs"); S[is.na(S)] <- 0; sqrt( w %*% S %*% w  )  } )
plot.ts(a*100); abline(h=target_vol*100)
a <- rowSums(abs(full_df_exposures[,-1] * full_df_vols[,-1]), na.rm=T)
plot.ts(a)
print(paste("Portfolio correlation risk:", correlation_shock_portfolio, "%"))
w <- with(today_trading, PositionPrevious * ContractSize * Close / FX / capital) %>% as.numeric
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1)) %>% unlist
correlation_shock_portfolio <- round(sum(abs(risks)), 2) * 100
print(paste("Portfolio correlation risk:", correlation_shock_portfolio, "%"))
w
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1)) %>% unlist
correlation_shock_portfolio <- round(sum(abs(risks)), 2) * 100
print(paste("Portfolio correlation risk:", correlation_shock_portfolio, "%"))
correlation_shock_portfolio
risks
w
tail(results[[i]]$Volatility, 1)
lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1))
w
results <- list()
for(symbol in names(instruments_data)) {
print(symbol)
df <- instruments_data[[symbol]][[1]]
hc <- instruments_data[[symbol]][[2]]
df$Symbol <- symbol
df$ForecastTrend <- df$ForecastCarry <- df$ForecastSkew <- df$Forecast <- df$PositionMax <- df$PositionOptimal <- df$PositionOptimized <- df$AdjFactor  <- df$RequiredTrade <- df$Buffer <- df$Trading <- df$PositionPrevious <- df$PositionUnrounded <- df$Position <- df$PositionRisk  <- 0
df$Return <- c(0, diff(log(df$Close)))
df$Volatility = calculate_volatility(df$Return)
fx <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(FX)
if(fx == "EUR") {
df$FX <- 1
} else {
df$FX <- dplyr::filter(FX_rates, FX == fx) %>% pull(Rate)
}
df$Weight <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Weight)
df$Product <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Product)
df$ContractSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(ContractSize)
df$MinPosition <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(MinPosition)
df$TickSize <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(TickSize)
df$Decimals <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Decimals)
df$Spread <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Spread)
df$Commission <- dplyr::filter(instruments_info, Symbol == symbol) %>% pull(Commission)
df$CostPerTrade <- (df$Spread / 2 + df$Commission)
# Relative volatility (strategy 13, it does not seems to add much)
{
# df$M <- 1
# df$RV <- relative_volatility(df$Volatility) # quite slow, you can replace it with df$Volatility / runMean(df$Volatility, 2520))
# df$RV <- df$Volatility / runMean(df$Volatility, 252)
# df$Q <- sapply(1:length(df$RV), function(i) sum(df$RV[i] > df$RV[1:i], na.rm=TRUE) / i)
# df$M <- EMA(2 - 1.5 * df$Q, 10)
}
# Trend-following (strategy 9)
df$ForecastTrend <- rowMeans(do.call(cbind, lapply(list(multiple_EMA, multiple_DC, multiple_KF, multiple_TII), function(f) f(df$Close, df$Close, df$Volatility))))
df$ForecastTrend <- cap_forecast(df$ForecastTrend * FDMtrend)
# Carry
# It is based on cash contract interest rate, we remove the 3% commission, so low volatility assets like
# bonds are not negatively affected in this analysis. Of course low volatility assets must be played on the future contract
# if you want to obtain the carry, as interest rates of the cash are always negative (because of the 3% commission that
# is higher than the volatility itself). For high volatility assets you can choose between cash or future.
hc_max <- which.max(hc)
hc_commission <- case_when(
df$Product[1] == "Cash" ~ 0,
df$Product[1] == "Index" ~ 0.03,
df$Product[1] == "Future" ~ 0.03,
TRUE ~ NA_real_)
hc_value <- (hc[hc_max]+hc_commission)
if(hc_value < 0)
hc_value <- 0
df$ForecastCarry <- ifelse(hc_max == 1, 1, -1) * hc_value / df$Volatility * 10
df$ForecastCarry <- cap_forecast(df$ForecastCarry * FDMcarry)
# Skewness (strategy 24)
df$ForecastSkew <- returns_skew(df$Return)
df$ForecastSkew <- cap_forecast(df$ForecastSkew * FDMskew)
# Final trade
df$Forecast <- (
strategy_weights$Trend * df$ForecastTrend +
strategy_weights$Carry * df$ForecastCarry +
strategy_weights$Skew  * df$ForecastSkew   )
df$Forecast <- cap_forecast(df$Forecast)
df$InstCapital <- capital * df$Weight * IDM
df$Exposure <- df$InstCapital * target_vol/df$Volatility
df$PositionOptimal <-  (df$Exposure * df$FX * df$Forecast/10) /
(df$ContractSize * df$Close  )
df$PositionMax <- (df$Exposure * df$FX * 2) /
(df$ContractSize * df$Close  )
# Be careful, now it is reverse-date sorted, you cannot run any other function like EMA etc..
df <- arrange(df, desc(Date))
#write_csv(df, paste0(logs_instruments_dir, "/", symbol, ".csv"))
results[[symbol]] <- df[1,]
}
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1)) %>% unlist
correlation_shock_portfolio <- round(sum(abs(risks)), 2) * 100
print(paste("Portfolio correlation risk:", correlation_shock_portfolio, "%"))
# Portfolio volatility
w <- with(today_trading, Position * ContractSize * Close / FX / capital) %>% as.numeric
# Portfolio correlation risk
risks <- lapply(1:length(results), function(i) w[i] * tail(results[[i]]$Volatility, 1)) %>% unlist
correlation_shock_portfolio <- round(sum(abs(risks)), 2) * 100
print(paste("Portfolio correlation risk:", correlation_shock_portfolio, "%"))
# Portfolio jump risk
jump <- lapply(results, function(x) quantile(x$Volatility, probs=0.99)) %>% unlist
jump_cov_matrix <- diag(jump) %*% cor_matrix %*% diag(jump)
jump_risk <- round(sqrt(w %*% jump_cor_matrix %*% w) * 100, 2)
print(paste("Portfolio jump risk:", jump_risk, "%"))
cor_matrix
